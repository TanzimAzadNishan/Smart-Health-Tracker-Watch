
DHT11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000005a6  0000063a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800080  00800080  0000065a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f4  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009db  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a6e  00000000  00000000  0000269f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000529  00000000  00000000  00003354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000098e  00000000  00000000  0000387d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000420b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 38       	cpi	r26, 0x89	; 137
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b5 01 	call	0x36a	; 0x36a <main>
  8a:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	8b 01       	movw	r16, r22
  9c:	d4 2f       	mov	r29, r20
  9e:	88 0f       	add	r24, r24
  a0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <i2c_start>
  a4:	88 23       	and	r24, r24
  a6:	51 f0       	breq	.+20     	; 0xbc <I2C_WRITESEQ+0x2a>
  a8:	c1 e0       	ldi	r28, 0x01	; 1
  aa:	0c c0       	rjmp	.+24     	; 0xc4 <I2C_WRITESEQ+0x32>
  ac:	f8 01       	movw	r30, r16
  ae:	ec 0f       	add	r30, r28
  b0:	f1 1d       	adc	r31, r1
  b2:	80 81       	ld	r24, Z
  b4:	0e 94 8e 02 	call	0x51c	; 0x51c <i2c_write>
  b8:	cf 5f       	subi	r28, 0xFF	; 255
  ba:	01 c0       	rjmp	.+2      	; 0xbe <I2C_WRITESEQ+0x2c>
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	cd 17       	cp	r28, r29
  c0:	a8 f3       	brcs	.-22     	; 0xac <I2C_WRITESEQ+0x1a>
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	0e 94 88 02 	call	0x510	; 0x510 <i2c_stop>
  c8:	8c 2f       	mov	r24, r28
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	08 95       	ret

000000d4 <wr_lcd_mode>:
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <wr_lcd_mode+0xa>
  de:	00 d0       	rcall	.+0      	; 0xe0 <wr_lcd_mode+0xc>
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	08 2f       	mov	r16, r24
  e8:	68 30       	cpi	r22, 0x08	; 8
  ea:	71 f4       	brne	.+28     	; 0x108 <wr_lcd_mode+0x34>
  ec:	88 23       	and	r24, r24
  ee:	11 f0       	breq	.+4      	; 0xf4 <wr_lcd_mode+0x20>
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <wr_lcd_mode+0x22>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	60 e6       	ldi	r22, 0x60	; 96
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	87 e2       	ldi	r24, 0x27	; 39
 102:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 106:	26 c0       	rjmp	.+76     	; 0x154 <wr_lcd_mode+0x80>
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	16 2f       	mov	r17, r22
 10e:	18 2b       	or	r17, r24
 110:	19 83       	std	Y+1, r17	; 0x01
 112:	80 2f       	mov	r24, r16
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	81 2b       	or	r24, r17
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	8a 83       	std	Y+2, r24	; 0x02
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	8b 83       	std	Y+3, r24	; 0x03
 120:	20 e1       	ldi	r18, 0x10	; 16
 122:	02 9f       	mul	r16, r18
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	81 2b       	or	r24, r17
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	8c 83       	std	Y+4, r24	; 0x04
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	8d 83       	std	Y+5, r24	; 0x05
 132:	45 e0       	ldi	r20, 0x05	; 5
 134:	be 01       	movw	r22, r28
 136:	6f 5f       	subi	r22, 0xFF	; 255
 138:	7f 4f       	sbci	r23, 0xFF	; 255
 13a:	87 e2       	ldi	r24, 0x27	; 39
 13c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 140:	10 fd       	sbrc	r17, 0
 142:	08 c0       	rjmp	.+16     	; 0x154 <wr_lcd_mode+0x80>
 144:	03 30       	cpi	r16, 0x03	; 3
 146:	30 f4       	brcc	.+12     	; 0x154 <wr_lcd_mode+0x80>
 148:	e3 ef       	ldi	r30, 0xF3	; 243
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <wr_lcd_mode+0x78>
 150:	00 c0       	rjmp	.+0      	; 0x152 <wr_lcd_mode+0x7e>
 152:	00 00       	nop
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <lcd_gotoxy>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	d8 2f       	mov	r29, r24
 16e:	c6 2f       	mov	r28, r22
 170:	e6 2f       	mov	r30, r22
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ef 59       	subi	r30, 0x9F	; 159
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 81       	ld	r24, Z
 17a:	8d 2b       	or	r24, r29
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	80 68       	ori	r24, 0x80	; 128
 180:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 184:	d0 93 82 00 	sts	0x0082, r29	; 0x800082 <_lcd_x>
 188:	c0 93 83 00 	sts	0x0083, r28	; 0x800083 <_lcd_y>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <lcd_clrscr>:
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 19a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <_lcd_y>
 19e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <_lcd_x>
 1a2:	08 95       	ret

000001a4 <lcd_putc>:
 1a4:	cf 93       	push	r28
 1a6:	c8 2f       	mov	r28, r24
 1a8:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <_lcd_x>
 1ac:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <_lcd_maxx>
 1b0:	98 17       	cp	r25, r24
 1b2:	10 f4       	brcc	.+4      	; 0x1b8 <lcd_putc+0x14>
 1b4:	ca 30       	cpi	r28, 0x0A	; 10
 1b6:	41 f4       	brne	.+16     	; 0x1c8 <lcd_putc+0x24>
 1b8:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <_lcd_y>
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	60 93 83 00 	sts	0x0083, r22	; 0x800083 <_lcd_y>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
 1c8:	ca 30       	cpi	r28, 0x0A	; 10
 1ca:	49 f0       	breq	.+18     	; 0x1de <lcd_putc+0x3a>
 1cc:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <_lcd_x>
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <_lcd_x>
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	8c 2f       	mov	r24, r28
 1da:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <lcd_puts>:
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <lcd_puts+0xe>
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
 1f0:	88 81       	ld	r24, Y
 1f2:	81 11       	cpse	r24, r1
 1f4:	fa cf       	rjmp	.-12     	; 0x1ea <lcd_puts+0x8>
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	00 d0       	rcall	.+0      	; 0x206 <lcd_init+0xa>
 206:	00 d0       	rcall	.+0      	; 0x208 <lcd_init+0xc>
 208:	00 d0       	rcall	.+0      	; 0x20a <lcd_init+0xe>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	94 e3       	ldi	r25, 0x34	; 52
 216:	9a 83       	std	Y+2, r25	; 0x02
 218:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	8c 83       	std	Y+4, r24	; 0x04
 21e:	94 e2       	ldi	r25, 0x24	; 36
 220:	9d 83       	std	Y+5, r25	; 0x05
 222:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 224:	80 e1       	ldi	r24, 0x10	; 16
 226:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 22a:	e1 e6       	ldi	r30, 0x61	; 97
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 5f       	subi	r24, 0xF0	; 240
 232:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 234:	81 81       	ldd	r24, Z+1	; 0x01
 236:	80 5f       	subi	r24, 0xF0	; 240
 238:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 23a:	87 b3       	in	r24, 0x17	; 23
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	87 bb       	out	0x17, r24	; 23
 240:	88 b3       	in	r24, 0x18	; 24
 242:	80 62       	ori	r24, 0x20	; 32
 244:	88 bb       	out	0x18, r24	; 24
    I2C_INIT();
 246:	0e 94 65 02 	call	0x4ca	; 0x4ca <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	8b e4       	ldi	r24, 0x4B	; 75
 24c:	9d e1       	ldi	r25, 0x1D	; 29
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0x52>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_init+0x58>
 254:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 256:	43 e0       	ldi	r20, 0x03	; 3
 258:	be 01       	movw	r22, r28
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	87 e2       	ldi	r24, 0x27	; 39
 260:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 264:	18 2f       	mov	r17, r24
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init+0x6e>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init+0x74>
 270:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 272:	43 e0       	ldi	r20, 0x03	; 3
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	87 e2       	ldi	r24, 0x27	; 39
 27c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 280:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 282:	43 e0       	ldi	r20, 0x03	; 3
 284:	be 01       	movw	r22, r28
 286:	6f 5f       	subi	r22, 0xFF	; 255
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	87 e2       	ldi	r24, 0x27	; 39
 28c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 290:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 292:	43 e0       	ldi	r20, 0x03	; 3
 294:	be 01       	movw	r22, r28
 296:	6c 5f       	subi	r22, 0xFC	; 252
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	87 e2       	ldi	r24, 0x27	; 39
 29c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 2a0:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	88 e2       	ldi	r24, 0x28	; 40
 2a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 2aa:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <lcd_init+0xb8>
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	88 bb       	out	0x18, r24	; 24
    wr_lcd_mode(0x0c, 0);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	8c e0       	ldi	r24, 0x0C	; 12
 2b8:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	80 2f       	mov	r24, r16
 2d0:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
}
 2d4:	26 96       	adiw	r28, 0x06	; 6
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 2ea:	68 e0       	ldi	r22, 0x08	; 8
 2ec:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 2f0:	08 95       	ret

000002f2 <Request>:
uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum;


void Request()						/* Microcontroller send start pulse or request */
{
	DDRD |= (1<<DHT11_PIN);
 2f2:	81 b3       	in	r24, 0x11	; 17
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<DHT11_PIN);		/* set to low pin */
 2f8:	82 b3       	in	r24, 0x12	; 18
 2fa:	8f 7b       	andi	r24, 0xBF	; 191
 2fc:	82 bb       	out	0x12, r24	; 18
 2fe:	87 e8       	ldi	r24, 0x87	; 135
 300:	93 e1       	ldi	r25, 0x13	; 19
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <Request+0x10>
 306:	00 c0       	rjmp	.+0      	; 0x308 <Request+0x16>
 308:	00 00       	nop
	_delay_ms(20);					/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);		/* set to high pin */
 30a:	82 b3       	in	r24, 0x12	; 18
 30c:	80 64       	ori	r24, 0x40	; 64
 30e:	82 bb       	out	0x12, r24	; 18
 310:	08 95       	ret

00000312 <Response>:
}

void Response()						/* receive response from DHT11 */
{
	DDRD &= ~(1<<DHT11_PIN);
 312:	81 b3       	in	r24, 0x11	; 17
 314:	8f 7b       	andi	r24, 0xBF	; 191
 316:	81 bb       	out	0x11, r24	; 17
	while(PIND & (1<<DHT11_PIN));
 318:	86 99       	sbic	0x10, 6	; 16
 31a:	fe cf       	rjmp	.-4      	; 0x318 <Response+0x6>
	while((PIND & (1<<DHT11_PIN))==0);
 31c:	86 9b       	sbis	0x10, 6	; 16
 31e:	fe cf       	rjmp	.-4      	; 0x31c <Response+0xa>
	while(PIND & (1<<DHT11_PIN));
 320:	86 99       	sbic	0x10, 6	; 16
 322:	fe cf       	rjmp	.-4      	; 0x320 <Response+0xe>
}
 324:	08 95       	ret

00000326 <Receive_data>:

uint8_t Receive_data()							/* receive data */
{	
	for (int q=0; q<8; q++)
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	19 c0       	rjmp	.+50     	; 0x35e <Receive_data+0x38>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);	/* check received bit 0 or 1 */
 32c:	86 9b       	sbis	0x10, 6	; 16
 32e:	fe cf       	rjmp	.-4      	; 0x32c <Receive_data+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	8a e0       	ldi	r24, 0x0A	; 10
 332:	8a 95       	dec	r24
 334:	f1 f7       	brne	.-4      	; 0x332 <Receive_data+0xc>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))				/* if high pulse is greater than 30ms */
 336:	86 9b       	sbis	0x10, 6	; 16
 338:	09 c0       	rjmp	.+18     	; 0x34c <Receive_data+0x26>
		c = (c<<1)|(0x01);						/* then its logic HIGH */
 33a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	81 60       	ori	r24, 0x01	; 1
 346:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
 34a:	05 c0       	rjmp	.+10     	; 0x356 <Receive_data+0x30>
		else									/* otherwise its logic LOW */
		c = (c<<1);
 34c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 350:	88 0f       	add	r24, r24
 352:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
		while(PIND & (1<<DHT11_PIN));
 356:	86 99       	sbic	0x10, 6	; 16
 358:	fe cf       	rjmp	.-4      	; 0x356 <Receive_data+0x30>
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data()							/* receive data */
{	
	for (int q=0; q<8; q++)
 35a:	2f 5f       	subi	r18, 0xFF	; 255
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	28 30       	cpi	r18, 0x08	; 8
 360:	31 05       	cpc	r19, r1
 362:	24 f3       	brlt	.-56     	; 0x32c <Receive_data+0x6>
		else									/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
 364:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 368:	08 95       	ret

0000036a <main>:

int main(void)
{
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	00 d0       	rcall	.+0      	; 0x370 <main+0x6>
 370:	00 d0       	rcall	.+0      	; 0x372 <main+0x8>
 372:	1f 92       	push	r1
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
	lcd_init(LCD_ON_DISPLAY);
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	lcd_backlight(0);
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 384:	8f e4       	ldi	r24, 0x4F	; 79
 386:	93 ec       	ldi	r25, 0xC3	; 195
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <main+0x1e>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <main+0x24>
 38e:	00 00       	nop
	_delay_ms(200);
	lcd_backlight(1);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_backlight>
 396:	8f e4       	ldi	r24, 0x4F	; 79
 398:	93 ec       	ldi	r25, 0xC3	; 195
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <main+0x30>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x36>
 3a0:	00 00       	nop
	_delay_ms(200);
		
	char data[5];

	lcd_clrscr();				/* clear LCD */
 3a2:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_clrscr>
	lcd_gotoxy(0,0);			/* enter column and row position */
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("Humidity =");
 3ae:	85 e6       	ldi	r24, 0x65	; 101
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	lcd_gotoxy(0,1);
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("Temp = ");
 3be:	80 e7       	ldi	r24, 0x70	; 112
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	
    while(1)
	{	
		Request();				/* send start pulse */
 3c6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Request>
		Response();				/* receive response */
 3ca:	0e 94 89 01 	call	0x312	; 0x312 <Response>
		I_RH=Receive_data();	/* store first eight bit in I_RH */
 3ce:	0e 94 93 01 	call	0x326	; 0x326 <Receive_data>
 3d2:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <I_RH>
		D_RH=Receive_data();	/* store next eight bit in D_RH */
 3d6:	0e 94 93 01 	call	0x326	; 0x326 <Receive_data>
 3da:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <D_RH>
		I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 3de:	0e 94 93 01 	call	0x326	; 0x326 <Receive_data>
 3e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <I_Temp>
		D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 3e6:	0e 94 93 01 	call	0x326	; 0x326 <Receive_data>
 3ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <D_Temp>
		CheckSum=Receive_data();/* store next eight bit in CheckSum */
 3ee:	0e 94 93 01 	call	0x326	; 0x326 <Receive_data>
 3f2:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <CheckSum>
		
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 3f6:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <I_RH>
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <D_RH>
 400:	9f 01       	movw	r18, r30
 402:	29 0f       	add	r18, r25
 404:	31 1d       	adc	r19, r1
 406:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <I_Temp>
 40a:	29 0f       	add	r18, r25
 40c:	31 1d       	adc	r19, r1
 40e:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <D_Temp>
 412:	29 0f       	add	r18, r25
 414:	31 1d       	adc	r19, r1
 416:	48 2f       	mov	r20, r24
 418:	50 e0       	ldi	r21, 0x00	; 0
 41a:	24 17       	cp	r18, r20
 41c:	35 07       	cpc	r19, r21
 41e:	09 f0       	breq	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	4a c0       	rjmp	.+148    	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 422:	4a e0       	ldi	r20, 0x0A	; 10
 424:	be 01       	movw	r22, r28
 426:	6f 5f       	subi	r22, 0xFF	; 255
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	cf 01       	movw	r24, r30
 42c:	0e 94 9c 02 	call	0x538	; 0x538 <__itoa_ncheck>
		}
		
		else
		{	
			itoa(I_RH,data,10);
			lcd_gotoxy(11,0);
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	8b e0       	ldi	r24, 0x0B	; 11
 434:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts(data);
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts(".");
 440:	88 e7       	ldi	r24, 0x78	; 120
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			
			itoa(D_RH,data,10);
 448:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <D_RH>
 44c:	4a e0       	ldi	r20, 0x0A	; 10
 44e:	be 01       	movw	r22, r28
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 9c 02 	call	0x538	; 0x538 <__itoa_ncheck>
			lcd_puts(data);
 45a:	ce 01       	movw	r24, r28
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts("%");
 462:	8a e7       	ldi	r24, 0x7A	; 122
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>

			itoa(I_Temp,data,10);
 46a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <I_Temp>
 46e:	4a e0       	ldi	r20, 0x0A	; 10
 470:	be 01       	movw	r22, r28
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 9c 02 	call	0x538	; 0x538 <__itoa_ncheck>
			lcd_gotoxy(6,1);
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	86 e0       	ldi	r24, 0x06	; 6
 480:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts(data);
 484:	ce 01       	movw	r24, r28
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts(".");
 48c:	88 e7       	ldi	r24, 0x78	; 120
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			
			itoa(D_Temp,data,10);
 494:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <D_Temp>
 498:	4a e0       	ldi	r20, 0x0A	; 10
 49a:	be 01       	movw	r22, r28
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 9c 02 	call	0x538	; 0x538 <__itoa_ncheck>
			lcd_puts(data);
 4a6:	ce 01       	movw	r24, r28
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			//lcddata(0xDF);
			lcd_puts("C ");
 4ae:	8c e7       	ldi	r24, 0x7C	; 124
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
 4b6:	9f e9       	ldi	r25, 0x9F	; 159
 4b8:	26 e8       	ldi	r18, 0x86	; 134
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	91 50       	subi	r25, 0x01	; 1
 4be:	20 40       	sbci	r18, 0x00	; 0
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c6:	00 00       	nop
 4c8:	7e cf       	rjmp	.-260    	; 0x3c6 <main+0x5c>

000004ca <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 4ca:	11 b8       	out	0x01, r1	; 1
 4cc:	8c e0       	ldi	r24, 0x0C	; 12
 4ce:	80 b9       	out	0x00, r24	; 0
 4d0:	08 95       	ret

000004d2 <i2c_start>:
 4d2:	94 ea       	ldi	r25, 0xA4	; 164
 4d4:	96 bf       	out	0x36, r25	; 54
 4d6:	06 b6       	in	r0, 0x36	; 54
 4d8:	07 fe       	sbrs	r0, 7
 4da:	fd cf       	rjmp	.-6      	; 0x4d6 <i2c_start+0x4>
 4dc:	91 b1       	in	r25, 0x01	; 1
 4de:	98 7f       	andi	r25, 0xF8	; 248
 4e0:	98 30       	cpi	r25, 0x08	; 8
 4e2:	11 f0       	breq	.+4      	; 0x4e8 <i2c_start+0x16>
 4e4:	90 31       	cpi	r25, 0x10	; 16
 4e6:	71 f4       	brne	.+28     	; 0x504 <i2c_start+0x32>
 4e8:	83 b9       	out	0x03, r24	; 3
 4ea:	84 e8       	ldi	r24, 0x84	; 132
 4ec:	86 bf       	out	0x36, r24	; 54
 4ee:	06 b6       	in	r0, 0x36	; 54
 4f0:	07 fe       	sbrs	r0, 7
 4f2:	fd cf       	rjmp	.-6      	; 0x4ee <i2c_start+0x1c>
 4f4:	81 b1       	in	r24, 0x01	; 1
 4f6:	88 7f       	andi	r24, 0xF8	; 248
 4f8:	88 31       	cpi	r24, 0x18	; 24
 4fa:	31 f0       	breq	.+12     	; 0x508 <i2c_start+0x36>
 4fc:	80 34       	cpi	r24, 0x40	; 64
 4fe:	31 f4       	brne	.+12     	; 0x50c <i2c_start+0x3a>
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	08 95       	ret
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	08 95       	ret
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	08 95       	ret

00000510 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 510:	84 e9       	ldi	r24, 0x94	; 148
 512:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 514:	06 b6       	in	r0, 0x36	; 54
 516:	04 fc       	sbrc	r0, 4
 518:	fd cf       	rjmp	.-6      	; 0x514 <i2c_stop+0x4>

}/* i2c_stop */
 51a:	08 95       	ret

0000051c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 51c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 51e:	84 e8       	ldi	r24, 0x84	; 132
 520:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 522:	06 b6       	in	r0, 0x36	; 54
 524:	07 fe       	sbrs	r0, 7
 526:	fd cf       	rjmp	.-6      	; 0x522 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 528:	81 b1       	in	r24, 0x01	; 1
 52a:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 52c:	88 32       	cpi	r24, 0x28	; 40
 52e:	11 f0       	breq	.+4      	; 0x534 <i2c_write+0x18>
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	08 95       	ret
	return 0;
 534:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 536:	08 95       	ret

00000538 <__itoa_ncheck>:
 538:	bb 27       	eor	r27, r27
 53a:	4a 30       	cpi	r20, 0x0A	; 10
 53c:	31 f4       	brne	.+12     	; 0x54a <__itoa_ncheck+0x12>
 53e:	99 23       	and	r25, r25
 540:	22 f4       	brpl	.+8      	; 0x54a <__itoa_ncheck+0x12>
 542:	bd e2       	ldi	r27, 0x2D	; 45
 544:	90 95       	com	r25
 546:	81 95       	neg	r24
 548:	9f 4f       	sbci	r25, 0xFF	; 255
 54a:	0c 94 a8 02 	jmp	0x550	; 0x550 <__utoa_common>

0000054e <__utoa_ncheck>:
 54e:	bb 27       	eor	r27, r27

00000550 <__utoa_common>:
 550:	fb 01       	movw	r30, r22
 552:	55 27       	eor	r21, r21
 554:	aa 27       	eor	r26, r26
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	aa 1f       	adc	r26, r26
 55c:	a4 17       	cp	r26, r20
 55e:	10 f0       	brcs	.+4      	; 0x564 <__utoa_common+0x14>
 560:	a4 1b       	sub	r26, r20
 562:	83 95       	inc	r24
 564:	50 51       	subi	r21, 0x10	; 16
 566:	b9 f7       	brne	.-18     	; 0x556 <__utoa_common+0x6>
 568:	a0 5d       	subi	r26, 0xD0	; 208
 56a:	aa 33       	cpi	r26, 0x3A	; 58
 56c:	08 f0       	brcs	.+2      	; 0x570 <__utoa_common+0x20>
 56e:	a9 5d       	subi	r26, 0xD9	; 217
 570:	a1 93       	st	Z+, r26
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	79 f7       	brne	.-34     	; 0x554 <__utoa_common+0x4>
 576:	b1 11       	cpse	r27, r1
 578:	b1 93       	st	Z+, r27
 57a:	11 92       	st	Z+, r1
 57c:	cb 01       	movw	r24, r22
 57e:	0c 94 c1 02 	jmp	0x582	; 0x582 <strrev>

00000582 <strrev>:
 582:	dc 01       	movw	r26, r24
 584:	fc 01       	movw	r30, r24
 586:	67 2f       	mov	r22, r23
 588:	71 91       	ld	r23, Z+
 58a:	77 23       	and	r23, r23
 58c:	e1 f7       	brne	.-8      	; 0x586 <strrev+0x4>
 58e:	32 97       	sbiw	r30, 0x02	; 2
 590:	04 c0       	rjmp	.+8      	; 0x59a <strrev+0x18>
 592:	7c 91       	ld	r23, X
 594:	6d 93       	st	X+, r22
 596:	70 83       	st	Z, r23
 598:	62 91       	ld	r22, -Z
 59a:	ae 17       	cp	r26, r30
 59c:	bf 07       	cpc	r27, r31
 59e:	c8 f3       	brcs	.-14     	; 0x592 <strrev+0x10>
 5a0:	08 95       	ret

000005a2 <_exit>:
 5a2:	f8 94       	cli

000005a4 <__stop_program>:
 5a4:	ff cf       	rjmp	.-2      	; 0x5a4 <__stop_program>
