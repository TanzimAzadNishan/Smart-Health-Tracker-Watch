
HeartBeat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000057a  0000060e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800088  00800088  00000636  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001497  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0b  00000000  00000000  00001c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a33  00000000  00000000  00002646  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  0000307c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000557  00000000  00000000  000032b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4b  00000000  00000000  00003807  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004252  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 91 01 	call	0x322	; 0x322 <main>
  8a:	0c 94 bb 02 	jmp	0x576	; 0x576 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	8b 01       	movw	r16, r22
  9c:	d4 2f       	mov	r29, r20
  9e:	88 0f       	add	r24, r24
  a0:	0e 94 48 02 	call	0x490	; 0x490 <i2c_start>
  a4:	88 23       	and	r24, r24
  a6:	51 f0       	breq	.+20     	; 0xbc <I2C_WRITESEQ+0x2a>
  a8:	c1 e0       	ldi	r28, 0x01	; 1
  aa:	0c c0       	rjmp	.+24     	; 0xc4 <I2C_WRITESEQ+0x32>
  ac:	f8 01       	movw	r30, r16
  ae:	ec 0f       	add	r30, r28
  b0:	f1 1d       	adc	r31, r1
  b2:	80 81       	ld	r24, Z
  b4:	0e 94 6d 02 	call	0x4da	; 0x4da <i2c_write>
  b8:	cf 5f       	subi	r28, 0xFF	; 255
  ba:	01 c0       	rjmp	.+2      	; 0xbe <I2C_WRITESEQ+0x2c>
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	cd 17       	cp	r28, r29
  c0:	a8 f3       	brcs	.-22     	; 0xac <I2C_WRITESEQ+0x1a>
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	0e 94 67 02 	call	0x4ce	; 0x4ce <i2c_stop>
  c8:	8c 2f       	mov	r24, r28
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	08 95       	ret

000000d4 <wr_lcd_mode>:
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <wr_lcd_mode+0xa>
  de:	00 d0       	rcall	.+0      	; 0xe0 <wr_lcd_mode+0xc>
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	08 2f       	mov	r16, r24
  e8:	68 30       	cpi	r22, 0x08	; 8
  ea:	71 f4       	brne	.+28     	; 0x108 <wr_lcd_mode+0x34>
  ec:	88 23       	and	r24, r24
  ee:	11 f0       	breq	.+4      	; 0xf4 <wr_lcd_mode+0x20>
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <wr_lcd_mode+0x22>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	60 e6       	ldi	r22, 0x60	; 96
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	87 e2       	ldi	r24, 0x27	; 39
 102:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 106:	26 c0       	rjmp	.+76     	; 0x154 <wr_lcd_mode+0x80>
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	16 2f       	mov	r17, r22
 10e:	18 2b       	or	r17, r24
 110:	19 83       	std	Y+1, r17	; 0x01
 112:	80 2f       	mov	r24, r16
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	81 2b       	or	r24, r17
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	8a 83       	std	Y+2, r24	; 0x02
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	8b 83       	std	Y+3, r24	; 0x03
 120:	20 e1       	ldi	r18, 0x10	; 16
 122:	02 9f       	mul	r16, r18
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	81 2b       	or	r24, r17
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	8c 83       	std	Y+4, r24	; 0x04
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	8d 83       	std	Y+5, r24	; 0x05
 132:	45 e0       	ldi	r20, 0x05	; 5
 134:	be 01       	movw	r22, r28
 136:	6f 5f       	subi	r22, 0xFF	; 255
 138:	7f 4f       	sbci	r23, 0xFF	; 255
 13a:	87 e2       	ldi	r24, 0x27	; 39
 13c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 140:	10 fd       	sbrc	r17, 0
 142:	08 c0       	rjmp	.+16     	; 0x154 <wr_lcd_mode+0x80>
 144:	03 30       	cpi	r16, 0x03	; 3
 146:	30 f4       	brcc	.+12     	; 0x154 <wr_lcd_mode+0x80>
 148:	e3 ef       	ldi	r30, 0xF3	; 243
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <wr_lcd_mode+0x78>
 150:	00 c0       	rjmp	.+0      	; 0x152 <wr_lcd_mode+0x7e>
 152:	00 00       	nop
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <lcd_gotoxy>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	d8 2f       	mov	r29, r24
 16e:	c6 2f       	mov	r28, r22
 170:	e6 2f       	mov	r30, r22
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ef 59       	subi	r30, 0x9F	; 159
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 81       	ld	r24, Z
 17a:	8d 2b       	or	r24, r29
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	80 68       	ori	r24, 0x80	; 128
 180:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 184:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <_lcd_x>
 188:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <_lcd_y>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <lcd_clrscr>:
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 19a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <_lcd_y>
 19e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <_lcd_x>
 1a2:	08 95       	ret

000001a4 <lcd_putc>:
 1a4:	cf 93       	push	r28
 1a6:	c8 2f       	mov	r28, r24
 1a8:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <_lcd_x>
 1ac:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 1b0:	98 17       	cp	r25, r24
 1b2:	10 f4       	brcc	.+4      	; 0x1b8 <lcd_putc+0x14>
 1b4:	ca 30       	cpi	r28, 0x0A	; 10
 1b6:	41 f4       	brne	.+16     	; 0x1c8 <lcd_putc+0x24>
 1b8:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <_lcd_y>
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <_lcd_y>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
 1c8:	ca 30       	cpi	r28, 0x0A	; 10
 1ca:	49 f0       	breq	.+18     	; 0x1de <lcd_putc+0x3a>
 1cc:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <_lcd_x>
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <_lcd_x>
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	8c 2f       	mov	r24, r28
 1da:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <lcd_puts>:
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <lcd_puts+0xe>
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
 1f0:	88 81       	ld	r24, Y
 1f2:	81 11       	cpse	r24, r1
 1f4:	fa cf       	rjmp	.-12     	; 0x1ea <lcd_puts+0x8>
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	00 d0       	rcall	.+0      	; 0x206 <lcd_init+0xa>
 206:	00 d0       	rcall	.+0      	; 0x208 <lcd_init+0xc>
 208:	00 d0       	rcall	.+0      	; 0x20a <lcd_init+0xe>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	94 e3       	ldi	r25, 0x34	; 52
 216:	9a 83       	std	Y+2, r25	; 0x02
 218:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	8c 83       	std	Y+4, r24	; 0x04
 21e:	94 e2       	ldi	r25, 0x24	; 36
 220:	9d 83       	std	Y+5, r25	; 0x05
 222:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 224:	80 e1       	ldi	r24, 0x10	; 16
 226:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 22a:	e1 e6       	ldi	r30, 0x61	; 97
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 5f       	subi	r24, 0xF0	; 240
 232:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 234:	81 81       	ldd	r24, Z+1	; 0x01
 236:	80 5f       	subi	r24, 0xF0	; 240
 238:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 23a:	87 b3       	in	r24, 0x17	; 23
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	87 bb       	out	0x17, r24	; 23
 240:	88 b3       	in	r24, 0x18	; 24
 242:	80 62       	ori	r24, 0x20	; 32
 244:	88 bb       	out	0x18, r24	; 24
    I2C_INIT();
 246:	0e 94 44 02 	call	0x488	; 0x488 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	8b e4       	ldi	r24, 0x4B	; 75
 24c:	9d e1       	ldi	r25, 0x1D	; 29
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0x52>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_init+0x58>
 254:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 256:	43 e0       	ldi	r20, 0x03	; 3
 258:	be 01       	movw	r22, r28
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	87 e2       	ldi	r24, 0x27	; 39
 260:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 264:	18 2f       	mov	r17, r24
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init+0x6e>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init+0x74>
 270:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 272:	43 e0       	ldi	r20, 0x03	; 3
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	87 e2       	ldi	r24, 0x27	; 39
 27c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 280:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 282:	43 e0       	ldi	r20, 0x03	; 3
 284:	be 01       	movw	r22, r28
 286:	6f 5f       	subi	r22, 0xFF	; 255
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	87 e2       	ldi	r24, 0x27	; 39
 28c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 290:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 292:	43 e0       	ldi	r20, 0x03	; 3
 294:	be 01       	movw	r22, r28
 296:	6c 5f       	subi	r22, 0xFC	; 252
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	87 e2       	ldi	r24, 0x27	; 39
 29c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 2a0:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	88 e2       	ldi	r24, 0x28	; 40
 2a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 2aa:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <lcd_init+0xb8>
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	88 bb       	out	0x18, r24	; 24
    wr_lcd_mode(0x0c, 0);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	8c e0       	ldi	r24, 0x0C	; 12
 2b8:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	80 2f       	mov	r24, r16
 2d0:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
}
 2d4:	26 96       	adiw	r28, 0x06	; 6
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 2ea:	68 e0       	ldi	r22, 0x08	; 8
 2ec:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 2f0:	08 95       	ret

000002f2 <ADC_Init>:

char disp[16]="0000000000000001";
char result[8] = "00000001";

void ADC_Init(){
	DDRA=0x0;			/* Make ADC port as input */
 2f2:	1a ba       	out	0x1a, r1	; 26
	ADMUX = 0b01100000;
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000101;
 2f8:	85 e8       	ldi	r24, 0x85	; 133
 2fa:	86 b9       	out	0x06, r24	; 6
 2fc:	08 95       	ret

000002fe <ADC_Read>:
	uint16_t lower;
	uint16_t upper;
	uint16_t result;
	float voltage;
	
	ADCSRA |= (1 << ADSC);
 2fe:	86 b1       	in	r24, 0x06	; 6
 300:	80 64       	ori	r24, 0x40	; 64
 302:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1 << ADSC)){;}
 304:	36 99       	sbic	0x06, 6	; 6
 306:	fe cf       	rjmp	.-4      	; 0x304 <ADC_Read+0x6>

	lower = (ADCL>>6);
 308:	24 b1       	in	r18, 0x04	; 4
 30a:	22 95       	swap	r18
 30c:	26 95       	lsr	r18
 30e:	26 95       	lsr	r18
 310:	23 70       	andi	r18, 0x03	; 3
	upper = (ADCH<<2);
 312:	85 b1       	in	r24, 0x05	; 5
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
	result = upper | lower;
	voltage = result * 5.0 / 1024;
	
	return result;
}
 31e:	82 2b       	or	r24, r18
 320:	08 95       	ret

00000322 <main>:


int main(void)
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	2e 97       	sbiw	r28, 0x0e	; 14
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
    lcd_init(LCD_ON_DISPLAY);
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
    lcd_backlight(0);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_backlight>
 342:	8f e4       	ldi	r24, 0x4F	; 79
 344:	93 ec       	ldi	r25, 0xC3	; 195
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x24>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x2a>
 34c:	00 00       	nop
    _delay_ms(200);
    lcd_backlight(1);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_backlight>
 354:	8f e4       	ldi	r24, 0x4F	; 79
 356:	93 ec       	ldi	r25, 0xC3	; 195
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <main+0x36>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x3c>
 35e:	00 00       	nop
    _delay_ms(200);
	lcd_clrscr();
 360:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_clrscr>
	//clock_t currTime = startTime;
	
	//long int startTime = (long int)startTime_t;
	//long int currTime = (long int)currTime_t;
	
	DDRD = 0xFF;  // #
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;  //for lcd
 368:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x00;  //Analog input
 36a:	1a ba       	out	0x1a, r1	; 26
	    
	ADC_Init();
 36c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ADC_Init>
	

	for(;;){
	lcd_gotoxy(0, 0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("Pulse Meter:");		
 378:	85 e6       	ldi	r24, 0x65	; 101
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	lcd_gotoxy(13, 0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	8d e0       	ldi	r24, 0x0D	; 13
 384:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("S");
 388:	82 e7       	ldi	r24, 0x72	; 114
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
 390:	9f e7       	ldi	r25, 0x7F	; 127
 392:	2a e1       	ldi	r18, 0x1A	; 26
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	91 50       	subi	r25, 0x01	; 1
 398:	20 40       	sbci	r18, 0x00	; 0
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <main+0x74>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x7e>
 3a0:	00 00       	nop
	
	_delay_ms(2000);
	
	lcd_gotoxy(13, 0);
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	8d e0       	ldi	r24, 0x0D	; 13
 3a6:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("P");
 3aa:	84 e7       	ldi	r24, 0x74	; 116
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
 3b2:	9f e3       	ldi	r25, 0x3F	; 63
 3b4:	22 e4       	ldi	r18, 0x42	; 66
 3b6:	8f e0       	ldi	r24, 0x0F	; 15
 3b8:	91 50       	subi	r25, 0x01	; 1
 3ba:	20 40       	sbci	r18, 0x00	; 0
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x96>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0xa0>
 3c2:	00 00       	nop
	
	_delay_ms(5000);
		
	lcd_gotoxy(13, 0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	8d e0       	ldi	r24, 0x0D	; 13
 3c8:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("W");
 3cc:	86 e7       	ldi	r24, 0x76	; 118
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	
	int i = 0;
	uint16_t thresh=550;
	int count=0;
	int counted = 0;
 3d4:	e1 2c       	mov	r14, r1
 3d6:	f1 2c       	mov	r15, r1
	lcd_gotoxy(13, 0);
	lcd_puts("W");
	
	int i = 0;
	uint16_t thresh=550;
	int count=0;
 3d8:	c1 2c       	mov	r12, r1
 3da:	d1 2c       	mov	r13, r1
	
	int h=0;
	int l=1023;
	
	char val[4]; // 0 - 255 value
	for(i = 0; i < 40; i++){
 3dc:	00 e0       	ldi	r16, 0x00	; 0
 3de:	10 e0       	ldi	r17, 0x00	; 0
 3e0:	1c c0       	rjmp	.+56     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			
		char temp[11]="";
		char ccount[3];

		uint16_t a=ADC_Read(0);
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ADC_Read>
		//if(a>h)h=a; //max peak
		//if(a<l)l=a; //min peak
		
		if(a>thresh && counted == 0){
 3e8:	87 32       	cpi	r24, 0x27	; 39
 3ea:	92 40       	sbci	r25, 0x02	; 2
 3ec:	48 f0       	brcs	.+18     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3ee:	ef 28       	or	r14, r15
 3f0:	51 f4       	brne	.+20     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			count+=1; //peak counting
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	c8 1a       	sub	r12, r24
 3f6:	d8 0a       	sbc	r13, r24
			counted = 1;
 3f8:	ee 24       	eor	r14, r14
 3fa:	e3 94       	inc	r14
 3fc:	f1 2c       	mov	r15, r1
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		}
		else{
			counted = 0;
 400:	e1 2c       	mov	r14, r1
 402:	f1 2c       	mov	r15, r1
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	e1 2c       	mov	r14, r1
 408:	f1 2c       	mov	r15, r1
 40a:	8f e4       	ldi	r24, 0x4F	; 79
 40c:	93 ec       	ldi	r25, 0xC3	; 195
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 414:	00 00       	nop
	
	int h=0;
	int l=1023;
	
	char val[4]; // 0 - 255 value
	for(i = 0; i < 40; i++){
 416:	0f 5f       	subi	r16, 0xFF	; 255
 418:	1f 4f       	sbci	r17, 0xFF	; 255
 41a:	08 32       	cpi	r16, 0x28	; 40
 41c:	11 05       	cpc	r17, r1
 41e:	0c f3       	brlt	.-62     	; 0x3e2 <main+0xc0>
	lcd_gotoxy(0, 1);
	lcd_puts(peaks);*/
	
	//lcd_clrscr();
	//displaying the heart rate
	lcd_clrscr();
 420:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_clrscr>
	char bpm[10]="H.Rate - ";
 424:	8a e0       	ldi	r24, 0x0A	; 10
 426:	ed e7       	ldi	r30, 0x7D	; 125
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	8e 01       	movw	r16, r28
 42c:	0f 5f       	subi	r16, 0xFF	; 255
 42e:	1f 4f       	sbci	r17, 0xFF	; 255
 430:	d8 01       	movw	r26, r16
 432:	01 90       	ld	r0, Z+
 434:	0d 92       	st	X+, r0
 436:	8a 95       	dec	r24
 438:	e1 f7       	brne	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	itoa(count*6,val,10);
 43a:	c6 01       	movw	r24, r12
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	8c 0d       	add	r24, r12
 442:	9d 1d       	adc	r25, r13
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 448:	4a e0       	ldi	r20, 0x0A	; 10
 44a:	be 01       	movw	r22, r28
 44c:	65 5f       	subi	r22, 0xF5	; 245
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	0e 94 86 02 	call	0x50c	; 0x50c <__itoa_ncheck>
	strcat(bpm,val);
 454:	be 01       	movw	r22, r28
 456:	65 5f       	subi	r22, 0xF5	; 245
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	c8 01       	movw	r24, r16
 45c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <strcat>
	strcat(bpm," bpm");
 460:	d8 01       	movw	r26, r16
 462:	0d 90       	ld	r0, X+
 464:	00 20       	and	r0, r0
 466:	e9 f7       	brne	.-6      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 468:	11 97       	sbiw	r26, 0x01	; 1
 46a:	85 e0       	ldi	r24, 0x05	; 5
 46c:	e8 e7       	ldi	r30, 0x78	; 120
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	01 90       	ld	r0, Z+
 472:	0d 92       	st	X+, r0
 474:	8a 95       	dec	r24
 476:	e1 f7       	brne	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	
	lcd_gotoxy(0, 1);
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts(bpm);
 480:	c8 01       	movw	r24, r16
 482:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	}
 486:	74 cf       	rjmp	.-280    	; 0x370 <main+0x4e>

00000488 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 488:	11 b8       	out	0x01, r1	; 1
 48a:	8c e0       	ldi	r24, 0x0C	; 12
 48c:	80 b9       	out	0x00, r24	; 0
 48e:	08 95       	ret

00000490 <i2c_start>:
 490:	94 ea       	ldi	r25, 0xA4	; 164
 492:	96 bf       	out	0x36, r25	; 54
 494:	06 b6       	in	r0, 0x36	; 54
 496:	07 fe       	sbrs	r0, 7
 498:	fd cf       	rjmp	.-6      	; 0x494 <i2c_start+0x4>
 49a:	91 b1       	in	r25, 0x01	; 1
 49c:	98 7f       	andi	r25, 0xF8	; 248
 49e:	98 30       	cpi	r25, 0x08	; 8
 4a0:	11 f0       	breq	.+4      	; 0x4a6 <i2c_start+0x16>
 4a2:	90 31       	cpi	r25, 0x10	; 16
 4a4:	71 f4       	brne	.+28     	; 0x4c2 <i2c_start+0x32>
 4a6:	83 b9       	out	0x03, r24	; 3
 4a8:	84 e8       	ldi	r24, 0x84	; 132
 4aa:	86 bf       	out	0x36, r24	; 54
 4ac:	06 b6       	in	r0, 0x36	; 54
 4ae:	07 fe       	sbrs	r0, 7
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <i2c_start+0x1c>
 4b2:	81 b1       	in	r24, 0x01	; 1
 4b4:	88 7f       	andi	r24, 0xF8	; 248
 4b6:	88 31       	cpi	r24, 0x18	; 24
 4b8:	31 f0       	breq	.+12     	; 0x4c6 <i2c_start+0x36>
 4ba:	80 34       	cpi	r24, 0x40	; 64
 4bc:	31 f4       	brne	.+12     	; 0x4ca <i2c_start+0x3a>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	08 95       	ret
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	08 95       	ret
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	08 95       	ret

000004ce <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 4ce:	84 e9       	ldi	r24, 0x94	; 148
 4d0:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 4d2:	06 b6       	in	r0, 0x36	; 54
 4d4:	04 fc       	sbrc	r0, 4
 4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <i2c_stop+0x4>

}/* i2c_stop */
 4d8:	08 95       	ret

000004da <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 4da:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 4dc:	84 e8       	ldi	r24, 0x84	; 132
 4de:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 4e0:	06 b6       	in	r0, 0x36	; 54
 4e2:	07 fe       	sbrs	r0, 7
 4e4:	fd cf       	rjmp	.-6      	; 0x4e0 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 4e6:	81 b1       	in	r24, 0x01	; 1
 4e8:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 4ea:	88 32       	cpi	r24, 0x28	; 40
 4ec:	11 f0       	breq	.+4      	; 0x4f2 <i2c_write+0x18>
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	08 95       	ret
	return 0;
 4f2:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 4f4:	08 95       	ret

000004f6 <strcat>:
 4f6:	fb 01       	movw	r30, r22
 4f8:	dc 01       	movw	r26, r24
 4fa:	0d 90       	ld	r0, X+
 4fc:	00 20       	and	r0, r0
 4fe:	e9 f7       	brne	.-6      	; 0x4fa <strcat+0x4>
 500:	11 97       	sbiw	r26, 0x01	; 1
 502:	01 90       	ld	r0, Z+
 504:	0d 92       	st	X+, r0
 506:	00 20       	and	r0, r0
 508:	e1 f7       	brne	.-8      	; 0x502 <strcat+0xc>
 50a:	08 95       	ret

0000050c <__itoa_ncheck>:
 50c:	bb 27       	eor	r27, r27
 50e:	4a 30       	cpi	r20, 0x0A	; 10
 510:	31 f4       	brne	.+12     	; 0x51e <__itoa_ncheck+0x12>
 512:	99 23       	and	r25, r25
 514:	22 f4       	brpl	.+8      	; 0x51e <__itoa_ncheck+0x12>
 516:	bd e2       	ldi	r27, 0x2D	; 45
 518:	90 95       	com	r25
 51a:	81 95       	neg	r24
 51c:	9f 4f       	sbci	r25, 0xFF	; 255
 51e:	0c 94 92 02 	jmp	0x524	; 0x524 <__utoa_common>

00000522 <__utoa_ncheck>:
 522:	bb 27       	eor	r27, r27

00000524 <__utoa_common>:
 524:	fb 01       	movw	r30, r22
 526:	55 27       	eor	r21, r21
 528:	aa 27       	eor	r26, r26
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	aa 1f       	adc	r26, r26
 530:	a4 17       	cp	r26, r20
 532:	10 f0       	brcs	.+4      	; 0x538 <__utoa_common+0x14>
 534:	a4 1b       	sub	r26, r20
 536:	83 95       	inc	r24
 538:	50 51       	subi	r21, 0x10	; 16
 53a:	b9 f7       	brne	.-18     	; 0x52a <__utoa_common+0x6>
 53c:	a0 5d       	subi	r26, 0xD0	; 208
 53e:	aa 33       	cpi	r26, 0x3A	; 58
 540:	08 f0       	brcs	.+2      	; 0x544 <__utoa_common+0x20>
 542:	a9 5d       	subi	r26, 0xD9	; 217
 544:	a1 93       	st	Z+, r26
 546:	00 97       	sbiw	r24, 0x00	; 0
 548:	79 f7       	brne	.-34     	; 0x528 <__utoa_common+0x4>
 54a:	b1 11       	cpse	r27, r1
 54c:	b1 93       	st	Z+, r27
 54e:	11 92       	st	Z+, r1
 550:	cb 01       	movw	r24, r22
 552:	0c 94 ab 02 	jmp	0x556	; 0x556 <strrev>

00000556 <strrev>:
 556:	dc 01       	movw	r26, r24
 558:	fc 01       	movw	r30, r24
 55a:	67 2f       	mov	r22, r23
 55c:	71 91       	ld	r23, Z+
 55e:	77 23       	and	r23, r23
 560:	e1 f7       	brne	.-8      	; 0x55a <strrev+0x4>
 562:	32 97       	sbiw	r30, 0x02	; 2
 564:	04 c0       	rjmp	.+8      	; 0x56e <strrev+0x18>
 566:	7c 91       	ld	r23, X
 568:	6d 93       	st	X+, r22
 56a:	70 83       	st	Z, r23
 56c:	62 91       	ld	r22, -Z
 56e:	ae 17       	cp	r26, r30
 570:	bf 07       	cpc	r27, r31
 572:	c8 f3       	brcs	.-14     	; 0x566 <strrev+0x10>
 574:	08 95       	ret

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>
