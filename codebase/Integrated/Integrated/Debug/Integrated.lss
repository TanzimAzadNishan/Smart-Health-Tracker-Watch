
Integrated.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000e82  00000f16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800082  00800082  00000f38  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e7f  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b39  00000000  00000000  00002faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed4  00000000  00000000  00003ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  000049bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068d  00000000  00000000  00004cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010d8  00000000  00000000  00005379  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006451  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3b       	cpi	r26, 0xB6	; 182
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 02 	call	0x530	; 0x530 <main>
  8a:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	8b 01       	movw	r16, r22
  9c:	d4 2f       	mov	r29, r20
  9e:	88 0f       	add	r24, r24
  a0:	0e 94 c5 03 	call	0x78a	; 0x78a <i2c_start>
  a4:	88 23       	and	r24, r24
  a6:	51 f0       	breq	.+20     	; 0xbc <I2C_WRITESEQ+0x2a>
  a8:	c1 e0       	ldi	r28, 0x01	; 1
  aa:	0c c0       	rjmp	.+24     	; 0xc4 <I2C_WRITESEQ+0x32>
  ac:	f8 01       	movw	r30, r16
  ae:	ec 0f       	add	r30, r28
  b0:	f1 1d       	adc	r31, r1
  b2:	80 81       	ld	r24, Z
  b4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <i2c_write>
  b8:	cf 5f       	subi	r28, 0xFF	; 255
  ba:	01 c0       	rjmp	.+2      	; 0xbe <I2C_WRITESEQ+0x2c>
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	cd 17       	cp	r28, r29
  c0:	a8 f3       	brcs	.-22     	; 0xac <I2C_WRITESEQ+0x1a>
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <i2c_stop>
  c8:	8c 2f       	mov	r24, r28
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	08 95       	ret

000000d4 <wr_lcd_mode>:
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <wr_lcd_mode+0xa>
  de:	00 d0       	rcall	.+0      	; 0xe0 <wr_lcd_mode+0xc>
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	08 2f       	mov	r16, r24
  e8:	68 30       	cpi	r22, 0x08	; 8
  ea:	71 f4       	brne	.+28     	; 0x108 <wr_lcd_mode+0x34>
  ec:	88 23       	and	r24, r24
  ee:	11 f0       	breq	.+4      	; 0xf4 <wr_lcd_mode+0x20>
  f0:	88 e0       	ldi	r24, 0x08	; 8
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <wr_lcd_mode+0x22>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	60 e6       	ldi	r22, 0x60	; 96
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	87 e2       	ldi	r24, 0x27	; 39
 102:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 106:	26 c0       	rjmp	.+76     	; 0x154 <wr_lcd_mode+0x80>
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	16 2f       	mov	r17, r22
 10e:	18 2b       	or	r17, r24
 110:	19 83       	std	Y+1, r17	; 0x01
 112:	80 2f       	mov	r24, r16
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	81 2b       	or	r24, r17
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	8a 83       	std	Y+2, r24	; 0x02
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	8b 83       	std	Y+3, r24	; 0x03
 120:	20 e1       	ldi	r18, 0x10	; 16
 122:	02 9f       	mul	r16, r18
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	81 2b       	or	r24, r17
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	8c 83       	std	Y+4, r24	; 0x04
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	8d 83       	std	Y+5, r24	; 0x05
 132:	45 e0       	ldi	r20, 0x05	; 5
 134:	be 01       	movw	r22, r28
 136:	6f 5f       	subi	r22, 0xFF	; 255
 138:	7f 4f       	sbci	r23, 0xFF	; 255
 13a:	87 e2       	ldi	r24, 0x27	; 39
 13c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 140:	10 fd       	sbrc	r17, 0
 142:	08 c0       	rjmp	.+16     	; 0x154 <wr_lcd_mode+0x80>
 144:	03 30       	cpi	r16, 0x03	; 3
 146:	30 f4       	brcc	.+12     	; 0x154 <wr_lcd_mode+0x80>
 148:	e3 ef       	ldi	r30, 0xF3	; 243
 14a:	f1 e0       	ldi	r31, 0x01	; 1
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <wr_lcd_mode+0x78>
 150:	00 c0       	rjmp	.+0      	; 0x152 <wr_lcd_mode+0x7e>
 152:	00 00       	nop
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <lcd_gotoxy>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	d8 2f       	mov	r29, r24
 16e:	c6 2f       	mov	r28, r22
 170:	e6 2f       	mov	r30, r22
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ef 59       	subi	r30, 0x9F	; 159
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 81       	ld	r24, Z
 17a:	8d 2b       	or	r24, r29
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	80 68       	ori	r24, 0x80	; 128
 180:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 184:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <_lcd_x>
 188:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <_lcd_y>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <lcd_clrscr>:
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 19a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <_lcd_y>
 19e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <_lcd_x>
 1a2:	08 95       	ret

000001a4 <lcd_putc>:
 1a4:	cf 93       	push	r28
 1a6:	c8 2f       	mov	r28, r24
 1a8:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <_lcd_x>
 1ac:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <_lcd_maxx>
 1b0:	98 17       	cp	r25, r24
 1b2:	10 f4       	brcc	.+4      	; 0x1b8 <lcd_putc+0x14>
 1b4:	ca 30       	cpi	r28, 0x0A	; 10
 1b6:	41 f4       	brne	.+16     	; 0x1c8 <lcd_putc+0x24>
 1b8:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <_lcd_y>
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <_lcd_y>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
 1c8:	ca 30       	cpi	r28, 0x0A	; 10
 1ca:	49 f0       	breq	.+18     	; 0x1de <lcd_putc+0x3a>
 1cc:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <_lcd_x>
 1d0:	8f 5f       	subi	r24, 0xFF	; 255
 1d2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <_lcd_x>
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	8c 2f       	mov	r24, r28
 1da:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <lcd_puts>:
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <lcd_puts+0xe>
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
 1f0:	88 81       	ld	r24, Y
 1f2:	81 11       	cpse	r24, r1
 1f4:	fa cf       	rjmp	.-12     	; 0x1ea <lcd_puts+0x8>
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	00 d0       	rcall	.+0      	; 0x206 <lcd_init+0xa>
 206:	00 d0       	rcall	.+0      	; 0x208 <lcd_init+0xc>
 208:	00 d0       	rcall	.+0      	; 0x20a <lcd_init+0xe>
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	94 e3       	ldi	r25, 0x34	; 52
 216:	9a 83       	std	Y+2, r25	; 0x02
 218:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	8c 83       	std	Y+4, r24	; 0x04
 21e:	94 e2       	ldi	r25, 0x24	; 36
 220:	9d 83       	std	Y+5, r25	; 0x05
 222:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
 224:	80 e1       	ldi	r24, 0x10	; 16
 226:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
 22a:	e1 e6       	ldi	r30, 0x61	; 97
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	80 5f       	subi	r24, 0xF0	; 240
 232:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
 234:	81 81       	ldd	r24, Z+1	; 0x01
 236:	80 5f       	subi	r24, 0xF0	; 240
 238:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
 23a:	87 b3       	in	r24, 0x17	; 23
 23c:	80 62       	ori	r24, 0x20	; 32
 23e:	87 bb       	out	0x17, r24	; 23
 240:	88 b3       	in	r24, 0x18	; 24
 242:	80 62       	ori	r24, 0x20	; 32
 244:	88 bb       	out	0x18, r24	; 24
    I2C_INIT();
 246:	0e 94 c1 03 	call	0x782	; 0x782 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	8b e4       	ldi	r24, 0x4B	; 75
 24c:	9d e1       	ldi	r25, 0x1D	; 29
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0x52>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_init+0x58>
 254:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
 256:	43 e0       	ldi	r20, 0x03	; 3
 258:	be 01       	movw	r22, r28
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	87 e2       	ldi	r24, 0x27	; 39
 260:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 264:	18 2f       	mov	r17, r24
 266:	81 ee       	ldi	r24, 0xE1	; 225
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init+0x6e>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init+0x74>
 270:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 272:	43 e0       	ldi	r20, 0x03	; 3
 274:	be 01       	movw	r22, r28
 276:	6f 5f       	subi	r22, 0xFF	; 255
 278:	7f 4f       	sbci	r23, 0xFF	; 255
 27a:	87 e2       	ldi	r24, 0x27	; 39
 27c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 280:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
 282:	43 e0       	ldi	r20, 0x03	; 3
 284:	be 01       	movw	r22, r28
 286:	6f 5f       	subi	r22, 0xFF	; 255
 288:	7f 4f       	sbci	r23, 0xFF	; 255
 28a:	87 e2       	ldi	r24, 0x27	; 39
 28c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 290:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
 292:	43 e0       	ldi	r20, 0x03	; 3
 294:	be 01       	movw	r22, r28
 296:	6c 5f       	subi	r22, 0xFC	; 252
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	87 e2       	ldi	r24, 0x27	; 39
 29c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
 2a0:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	88 e2       	ldi	r24, 0x28	; 40
 2a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 2aa:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <lcd_init+0xb8>
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	8f 7d       	andi	r24, 0xDF	; 223
 2b2:	88 bb       	out	0x18, r24	; 24
    wr_lcd_mode(0x0c, 0);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	8c e0       	ldi	r24, 0x0C	; 12
 2b8:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	80 2f       	mov	r24, r16
 2d0:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
}
 2d4:	26 96       	adiw	r28, 0x06	; 6
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
 2ea:	68 e0       	ldi	r22, 0x08	; 8
 2ec:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
 2f0:	08 95       	ret

000002f2 <ADC_Init>:
		uart_send(ds18b20_temp[i]);
		i++;
	}
	
	_delay_ms(1000);			
}
 2f2:	1a ba       	out	0x1a, r1	; 26
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	87 b9       	out	0x07, r24	; 7
 2f8:	85 e8       	ldi	r24, 0x85	; 133
 2fa:	86 b9       	out	0x06, r24	; 6
 2fc:	08 95       	ret

000002fe <ADC_Read>:
 2fe:	86 b1       	in	r24, 0x06	; 6
 300:	80 64       	ori	r24, 0x40	; 64
 302:	86 b9       	out	0x06, r24	; 6
 304:	36 99       	sbic	0x06, 6	; 6
 306:	fe cf       	rjmp	.-4      	; 0x304 <ADC_Read+0x6>
 308:	24 b1       	in	r18, 0x04	; 4
 30a:	22 95       	swap	r18
 30c:	26 95       	lsr	r18
 30e:	26 95       	lsr	r18
 310:	23 70       	andi	r18, 0x03	; 3
 312:	85 b1       	in	r24, 0x05	; 5
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	82 2b       	or	r24, r18
 320:	08 95       	ret

00000322 <uart_init>:
 322:	10 bc       	out	0x20, r1	; 32
 324:	8c e0       	ldi	r24, 0x0C	; 12
 326:	89 b9       	out	0x09, r24	; 9
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	8b b9       	out	0x0b, r24	; 11
 32c:	88 e1       	ldi	r24, 0x18	; 24
 32e:	8a b9       	out	0x0a, r24	; 10
 330:	86 e8       	ldi	r24, 0x86	; 134
 332:	80 bd       	out	0x20, r24	; 32
 334:	08 95       	ret

00000336 <therm_reset>:


uint8_t therm_reset(){
	uint8_t i;
	//Pull line low and wait for 480uS
	THERM_LOW();
 336:	85 b3       	in	r24, 0x15	; 21
 338:	8f 77       	andi	r24, 0x7F	; 127
 33a:	85 bb       	out	0x15, r24	; 21
	THERM_OUTPUT_MODE();
 33c:	84 b3       	in	r24, 0x14	; 20
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 342:	80 ea       	ldi	r24, 0xA0	; 160
 344:	8a 95       	dec	r24
 346:	f1 f7       	brne	.-4      	; 0x344 <therm_reset+0xe>
	_delay_us(480);
	//Release line and wait for 60uS
	THERM_INPUT_MODE();
 348:	84 b3       	in	r24, 0x14	; 20
 34a:	8f 77       	andi	r24, 0x7F	; 127
 34c:	84 bb       	out	0x14, r24	; 20
 34e:	94 e1       	ldi	r25, 0x14	; 20
 350:	9a 95       	dec	r25
 352:	f1 f7       	brne	.-4      	; 0x350 <therm_reset+0x1a>
	_delay_us(60);
	//Store line value and wait until the completion of 480uS period
	i=(THERM_PIN & (1<<THERM_DQ));
 354:	83 b3       	in	r24, 0x13	; 19
 356:	80 78       	andi	r24, 0x80	; 128
 358:	9c e8       	ldi	r25, 0x8C	; 140
 35a:	9a 95       	dec	r25
 35c:	f1 f7       	brne	.-4      	; 0x35a <therm_reset+0x24>
	_delay_us(420);
	//Return the value read from the presence pulse (0=OK, 1=WRONG)
	return i;

}
 35e:	08 95       	ret

00000360 <therm_write_bit>:



void therm_write_bit(uint8_t bit){
	//Pull line low for 1uS
	THERM_LOW();
 360:	95 b3       	in	r25, 0x15	; 21
 362:	9f 77       	andi	r25, 0x7F	; 127
 364:	95 bb       	out	0x15, r25	; 21
	THERM_OUTPUT_MODE();
 366:	94 b3       	in	r25, 0x14	; 20
 368:	90 68       	ori	r25, 0x80	; 128
 36a:	94 bb       	out	0x14, r25	; 20
 36c:	00 00       	nop
	_delay_us(1);
	//If we want to write 1, release the line (if not will keep low)
	if(bit) THERM_INPUT_MODE();
 36e:	88 23       	and	r24, r24
 370:	19 f0       	breq	.+6      	; 0x378 <therm_write_bit+0x18>
 372:	84 b3       	in	r24, 0x14	; 20
 374:	8f 77       	andi	r24, 0x7F	; 127
 376:	84 bb       	out	0x14, r24	; 20
 378:	84 e1       	ldi	r24, 0x14	; 20
 37a:	8a 95       	dec	r24
 37c:	f1 f7       	brne	.-4      	; 0x37a <therm_write_bit+0x1a>
	//Wait for 60uS and release the line
	_delay_us(60);
	THERM_INPUT_MODE();
 37e:	84 b3       	in	r24, 0x14	; 20
 380:	8f 77       	andi	r24, 0x7F	; 127
 382:	84 bb       	out	0x14, r24	; 20
 384:	08 95       	ret

00000386 <therm_read_bit>:


uint8_t therm_read_bit(void){
	uint8_t bit=0;
	//Pull line low for 1uS
	THERM_LOW();
 386:	85 b3       	in	r24, 0x15	; 21
 388:	8f 77       	andi	r24, 0x7F	; 127
 38a:	85 bb       	out	0x15, r24	; 21
	THERM_OUTPUT_MODE();
 38c:	84 b3       	in	r24, 0x14	; 20
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	84 bb       	out	0x14, r24	; 20
 392:	00 00       	nop
	_delay_us(1);
	//Release line and wait for 14uS
	THERM_INPUT_MODE();
 394:	84 b3       	in	r24, 0x14	; 20
 396:	8f 77       	andi	r24, 0x7F	; 127
 398:	84 bb       	out	0x14, r24	; 20
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	8a 95       	dec	r24
 39e:	f1 f7       	brne	.-4      	; 0x39c <therm_read_bit+0x16>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <therm_read_bit+0x1c>
	_delay_us(14);
	//Read line value
	if(THERM_PIN&(1<<THERM_DQ)) bit=1;
 3a2:	9f 99       	sbic	0x13, 7	; 19
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <therm_read_bit+0x24>
	THERM_INPUT_MODE();
}


uint8_t therm_read_bit(void){
	uint8_t bit=0;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <therm_read_bit+0x26>
	_delay_us(1);
	//Release line and wait for 14uS
	THERM_INPUT_MODE();
	_delay_us(14);
	//Read line value
	if(THERM_PIN&(1<<THERM_DQ)) bit=1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	9f e0       	ldi	r25, 0x0F	; 15
 3ae:	9a 95       	dec	r25
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <therm_read_bit+0x28>
	//Wait for 45uS to end and return read value
	_delay_us(45);
	return bit;
}
 3b2:	08 95       	ret

000003b4 <therm_read_byte>:



uint8_t therm_read_byte(void){
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
	uint8_t i=8, n=0;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	98 e0       	ldi	r25, 0x08	; 8
	while(i--){
 3bc:	0a c0       	rjmp	.+20     	; 0x3d2 <therm_read_byte+0x1e>
		//Shift one position right and store read value
		n>>=1;
 3be:	c8 2f       	mov	r28, r24
 3c0:	c6 95       	lsr	r28
		n|=(therm_read_bit()<<7);
 3c2:	0e 94 c3 01 	call	0x386	; 0x386 <therm_read_bit>
 3c6:	20 e8       	ldi	r18, 0x80	; 128
 3c8:	82 9f       	mul	r24, r18
 3ca:	c0 01       	movw	r24, r0
 3cc:	11 24       	eor	r1, r1
 3ce:	8c 2b       	or	r24, r28



uint8_t therm_read_byte(void){
	uint8_t i=8, n=0;
	while(i--){
 3d0:	9d 2f       	mov	r25, r29
 3d2:	df ef       	ldi	r29, 0xFF	; 255
 3d4:	d9 0f       	add	r29, r25
 3d6:	91 11       	cpse	r25, r1
 3d8:	f2 cf       	rjmp	.-28     	; 0x3be <therm_read_byte+0xa>
		n>>=1;
		n|=(therm_read_bit()<<7);
	}
	return n;

}
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <therm_write_byte>:


void therm_write_byte(uint8_t byte){
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	c8 2f       	mov	r28, r24
	uint8_t i=8;
 3e6:	88 e0       	ldi	r24, 0x08	; 8
	while(i--){
 3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <therm_write_byte+0x16>
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
 3ea:	8c 2f       	mov	r24, r28
 3ec:	81 70       	andi	r24, 0x01	; 1
 3ee:	0e 94 b0 01 	call	0x360	; 0x360 <therm_write_bit>
		byte>>=1;
 3f2:	c6 95       	lsr	r28
}


void therm_write_byte(uint8_t byte){
	uint8_t i=8;
	while(i--){
 3f4:	8d 2f       	mov	r24, r29
 3f6:	df ef       	ldi	r29, 0xFF	; 255
 3f8:	d8 0f       	add	r29, r24
 3fa:	81 11       	cpse	r24, r1
 3fc:	f6 cf       	rjmp	.-20     	; 0x3ea <therm_write_byte+0xa>
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
		byte>>=1;
	}
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <therm_read_temperature>:

#define THERM_DECIMAL_STEPS_12BIT 0.0625
void therm_read_temperature(){
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
	int8_t digit;
	uint16_t decimal;
	
	
	//Reset, skip ROM and start temperature conversion
	therm_reset();
 408:	0e 94 9b 01 	call	0x336	; 0x336 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);
 40c:	8c ec       	ldi	r24, 0xCC	; 204
 40e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <therm_write_byte>
	therm_write_byte(THERM_CMD_CONVERTTEMP);
 412:	84 e4       	ldi	r24, 0x44	; 68
 414:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <therm_write_byte>
	//Wait until conversion is complete
	while(!therm_read_bit());
 418:	0e 94 c3 01 	call	0x386	; 0x386 <therm_read_bit>
 41c:	88 23       	and	r24, r24
 41e:	e1 f3       	breq	.-8      	; 0x418 <therm_read_temperature+0x14>
	//Reset, skip ROM and send command to read
	therm_reset();
 420:	0e 94 9b 01 	call	0x336	; 0x336 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);
 424:	8c ec       	ldi	r24, 0xCC	; 204
 426:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <therm_write_byte>
	therm_write_byte(THERM_CMD_RSCRATCHPAD);
 42a:	8e eb       	ldi	r24, 0xBE	; 190
 42c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <therm_write_byte>
	
	//Read (only 2 first bytes)
	temperature[0]=therm_read_byte();
 430:	0e 94 da 01 	call	0x3b4	; 0x3b4 <therm_read_byte>
 434:	d8 2f       	mov	r29, r24
	temperature[1]=therm_read_byte();
 436:	0e 94 da 01 	call	0x3b4	; 0x3b4 <therm_read_byte>
 43a:	c8 2f       	mov	r28, r24
	therm_reset();
 43c:	0e 94 9b 01 	call	0x336	; 0x336 <therm_reset>
	
	digit=temperature[0]>>4;
 440:	2d 2f       	mov	r18, r29
 442:	22 95       	swap	r18
 444:	2f 70       	andi	r18, 0x0F	; 15
	digit|=(temperature[1]&0x7)<<4;
 446:	c7 70       	andi	r28, 0x07	; 7
 448:	30 e1       	ldi	r19, 0x10	; 16
 44a:	c3 9f       	mul	r28, r19
 44c:	c0 01       	movw	r24, r0
 44e:	11 24       	eor	r1, r1
 450:	28 2b       	or	r18, r24

	decimal=temperature[0]&0xff;
	sprintf(ds18b20_temp, "%d.%d", digit, (int)decimal/10);
 452:	8d 2f       	mov	r24, r29
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	6a e0       	ldi	r22, 0x0A	; 10
 458:	70 e0       	ldi	r23, 0x00	; 0
 45a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__divmodhi4>
 45e:	7f 93       	push	r23
 460:	6f 93       	push	r22
 462:	82 2f       	mov	r24, r18
 464:	02 2e       	mov	r0, r18
 466:	00 0c       	add	r0, r0
 468:	99 0b       	sbc	r25, r25
 46a:	9f 93       	push	r25
 46c:	2f 93       	push	r18
 46e:	87 e6       	ldi	r24, 0x67	; 103
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	9f 93       	push	r25
 474:	8f 93       	push	r24
 476:	85 e9       	ldi	r24, 0x95	; 149
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	9f 93       	push	r25
 47c:	8f 93       	push	r24
 47e:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf>
	
	lcd_gotoxy(3,1);
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	83 e0       	ldi	r24, 0x03	; 3
 486:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts(ds18b20_temp);
 48a:	85 e9       	ldi	r24, 0x95	; 149
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	lcd_gotoxy(8,1);
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	88 e0       	ldi	r24, 0x08	; 8
 496:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts(" ");
 49a:	8d e6       	ldi	r24, 0x6D	; 109
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
}
 4a2:	8d b7       	in	r24, 0x3d	; 61
 4a4:	9e b7       	in	r25, 0x3e	; 62
 4a6:	08 96       	adiw	r24, 0x08	; 8
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	9e bf       	out	0x3e, r25	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	8d bf       	out	0x3d, r24	; 61
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <Request>:



void Request()
{
	DDRD |= (1<<DHT11_PIN);
 4b8:	81 b3       	in	r24, 0x11	; 17
 4ba:	80 64       	ori	r24, 0x40	; 64
 4bc:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<DHT11_PIN);
 4be:	82 b3       	in	r24, 0x12	; 18
 4c0:	8f 7b       	andi	r24, 0xBF	; 191
 4c2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c4:	87 e8       	ldi	r24, 0x87	; 135
 4c6:	93 e1       	ldi	r25, 0x13	; 19
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <Request+0x10>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <Request+0x16>
 4ce:	00 00       	nop
	_delay_ms(20);
	PORTD |= (1<<DHT11_PIN);
 4d0:	82 b3       	in	r24, 0x12	; 18
 4d2:	80 64       	ori	r24, 0x40	; 64
 4d4:	82 bb       	out	0x12, r24	; 18
 4d6:	08 95       	ret

000004d8 <Response>:
}

void Response()
{
	DDRD &= ~(1<<DHT11_PIN);
 4d8:	81 b3       	in	r24, 0x11	; 17
 4da:	8f 7b       	andi	r24, 0xBF	; 191
 4dc:	81 bb       	out	0x11, r24	; 17
	while(PIND & (1<<DHT11_PIN));
 4de:	86 99       	sbic	0x10, 6	; 16
 4e0:	fe cf       	rjmp	.-4      	; 0x4de <Response+0x6>
	while((PIND & (1<<DHT11_PIN))==0);
 4e2:	86 9b       	sbis	0x10, 6	; 16
 4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <Response+0xa>
	while(PIND & (1<<DHT11_PIN));
 4e6:	86 99       	sbic	0x10, 6	; 16
 4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <Response+0xe>
}
 4ea:	08 95       	ret

000004ec <Receive_data>:


uint8_t Receive_data()
{
	for (int q=0; q<8; q++)
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	19 c0       	rjmp	.+50     	; 0x524 <Receive_data+0x38>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);
 4f2:	86 9b       	sbis	0x10, 6	; 16
 4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <Receive_data+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f6:	8a e0       	ldi	r24, 0x0A	; 10
 4f8:	8a 95       	dec	r24
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <Receive_data+0xc>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))
 4fc:	86 9b       	sbis	0x10, 6	; 16
 4fe:	09 c0       	rjmp	.+18     	; 0x512 <Receive_data+0x26>
		c = (c<<1)|(0x01);
 500:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <c>
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	81 60       	ori	r24, 0x01	; 1
 50c:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <c>
 510:	05 c0       	rjmp	.+10     	; 0x51c <Receive_data+0x30>
		else
		c = (c<<1);
 512:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <c>
 516:	88 0f       	add	r24, r24
 518:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <c>
		while(PIND & (1<<DHT11_PIN));
 51c:	86 99       	sbic	0x10, 6	; 16
 51e:	fe cf       	rjmp	.-4      	; 0x51c <Receive_data+0x30>
}


uint8_t Receive_data()
{
	for (int q=0; q<8; q++)
 520:	2f 5f       	subi	r18, 0xFF	; 255
 522:	3f 4f       	sbci	r19, 0xFF	; 255
 524:	28 30       	cpi	r18, 0x08	; 8
 526:	31 05       	cpc	r19, r1
 528:	24 f3       	brlt	.-56     	; 0x4f2 <Receive_data+0x6>
		else
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
 52a:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <c>
 52e:	08 95       	ret

00000530 <main>:


int main(void)
{
	lcd_init(LCD_ON_DISPLAY);
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	lcd_backlight(0);
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53c:	8f e4       	ldi	r24, 0x4F	; 79
 53e:	93 ec       	ldi	r25, 0xC3	; 195
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <main+0x10>
 544:	00 c0       	rjmp	.+0      	; 0x546 <main+0x16>
 546:	00 00       	nop
	_delay_ms(200);
	lcd_backlight(1);
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_backlight>
 54e:	8f e4       	ldi	r24, 0x4F	; 79
 550:	93 ec       	ldi	r25, 0xC3	; 195
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <main+0x22>
 556:	00 c0       	rjmp	.+0      	; 0x558 <main+0x28>
 558:	00 00       	nop
	_delay_ms(200);

	lcd_clrscr();
 55a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_clrscr>
	lcd_gotoxy(0,0);
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("H=");
 566:	8f e6       	ldi	r24, 0x6F	; 111
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	lcd_gotoxy(9,1);
 56e:	61 e0       	ldi	r22, 0x01	; 1
 570:	89 e0       	ldi	r24, 0x09	; 9
 572:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("T=");
 576:	83 e7       	ldi	r24, 0x73	; 115
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	
	
	lcd_gotoxy(0,1);
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("BT=");
 586:	82 e7       	ldi	r24, 0x72	; 114
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	
	lcd_gotoxy(9, 0);
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	89 e0       	ldi	r24, 0x09	; 9
 592:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("BPM=");
 596:	86 e7       	ldi	r24, 0x76	; 118
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	
	
	DDRD = 0xFF;  
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;  
 5a2:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x00;
 5a4:	1a ba       	out	0x1a, r1	; 26
		
	ADC_Init();
 5a6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ADC_Init>
	uart_init();
 5aa:	0e 94 91 01 	call	0x322	; 0x322 <uart_init>
		char val[5];
		itoa(noOfPulse, val, 10);
		lcd_gotoxy(7,0);
		lcd_puts(val);*/		
		
		Request();				
 5ae:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Request>
		Response();				
 5b2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Response>
		I_RH=Receive_data();	
 5b6:	0e 94 76 02 	call	0x4ec	; 0x4ec <Receive_data>
 5ba:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <I_RH>
		D_RH=Receive_data();	
 5be:	0e 94 76 02 	call	0x4ec	; 0x4ec <Receive_data>
 5c2:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <D_RH>
		I_Temp=Receive_data();	
 5c6:	0e 94 76 02 	call	0x4ec	; 0x4ec <Receive_data>
 5ca:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <I_Temp>
		D_Temp=Receive_data();	
 5ce:	0e 94 76 02 	call	0x4ec	; 0x4ec <Receive_data>
 5d2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <D_Temp>
		CheckSum=Receive_data();
 5d6:	0e 94 76 02 	call	0x4ec	; 0x4ec <Receive_data>
 5da:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <CheckSum>
		    
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 5de:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <I_RH>
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <D_RH>
 5e8:	9f 01       	movw	r18, r30
 5ea:	29 0f       	add	r18, r25
 5ec:	31 1d       	adc	r19, r1
 5ee:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <I_Temp>
 5f2:	29 0f       	add	r18, r25
 5f4:	31 1d       	adc	r19, r1
 5f6:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <D_Temp>
 5fa:	29 0f       	add	r18, r25
 5fc:	31 1d       	adc	r19, r1
 5fe:	48 2f       	mov	r20, r24
 600:	50 e0       	ldi	r21, 0x00	; 0
 602:	24 17       	cp	r18, r20
 604:	35 07       	cpc	r19, r21
 606:	09 f0       	breq	.+2      	; 0x60a <main+0xda>
 608:	46 c0       	rjmp	.+140    	; 0x696 <main+0x166>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 60a:	4a e0       	ldi	r20, 0x0A	; 10
 60c:	60 e9       	ldi	r22, 0x90	; 144
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	cf 01       	movw	r24, r30
 612:	0e 94 20 04 	call	0x840	; 0x840 <__itoa_ncheck>
		}
		    
		else
		{
			itoa(I_RH,dht11_hum_main,10);
			lcd_gotoxy(2,0);
 616:	60 e0       	ldi	r22, 0x00	; 0
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts(dht11_hum_main);
 61e:	80 e9       	ldi	r24, 0x90	; 144
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts(".");
 626:	8b e7       	ldi	r24, 0x7B	; 123
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			    
			itoa(D_RH,dht11_hum_fraction,10);
 62e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <D_RH>
 632:	4a e0       	ldi	r20, 0x0A	; 10
 634:	63 ea       	ldi	r22, 0xA3	; 163
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	0e 94 20 04 	call	0x840	; 0x840 <__itoa_ncheck>
			lcd_puts(dht11_hum_fraction);
 63e:	83 ea       	ldi	r24, 0xA3	; 163
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts("%");
 646:	8d e7       	ldi	r24, 0x7D	; 125
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>

			itoa(I_Temp,dht11_temp_main,10);
 64e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <I_Temp>
 652:	4a e0       	ldi	r20, 0x0A	; 10
 654:	6b e8       	ldi	r22, 0x8B	; 139
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 20 04 	call	0x840	; 0x840 <__itoa_ncheck>
			lcd_gotoxy(11,1);
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	8b e0       	ldi	r24, 0x0B	; 11
 662:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts(dht11_temp_main);
 666:	8b e8       	ldi	r24, 0x8B	; 139
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts(".");
 66e:	8b e7       	ldi	r24, 0x7B	; 123
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			    
			itoa(D_Temp,dht11_temp_fraction,10);
 676:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <D_Temp>
 67a:	4a e0       	ldi	r20, 0x0A	; 10
 67c:	61 eb       	ldi	r22, 0xB1	; 177
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	0e 94 20 04 	call	0x840	; 0x840 <__itoa_ncheck>
			lcd_puts(dht11_temp_fraction);
 686:	81 eb       	ldi	r24, 0xB1	; 177
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts("C");
 68e:	8f e7       	ldi	r24, 0x7F	; 127
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
 696:	83 ed       	ldi	r24, 0xD3	; 211
 698:	90 e3       	ldi	r25, 0x30	; 48
 69a:	01 97       	sbiw	r24, 0x01	; 1
 69c:	f1 f7       	brne	.-4      	; 0x69a <main+0x16a>
 69e:	00 c0       	rjmp	.+0      	; 0x6a0 <main+0x170>
 6a0:	00 00       	nop
		}
		    
		_delay_ms(50);
		
		therm_read_temperature();
 6a2:	0e 94 02 02 	call	0x404	; 0x404 <therm_read_temperature>
 6a6:	83 ed       	ldi	r24, 0xD3	; 211
 6a8:	90 e3       	ldi	r25, 0x30	; 48
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <main+0x17a>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0x180>
 6b0:	00 00       	nop
		_delay_ms(50);		
		
		noOfPulse++;
 6b2:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <noOfPulse>
 6b6:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <noOfPulse+0x1>
 6ba:	01 96       	adiw	r24, 0x01	; 1
 6bc:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <noOfPulse+0x1>
 6c0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <noOfPulse>
		if(noOfPulse % 23 == 0){
 6c4:	67 e1       	ldi	r22, 0x17	; 23
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__divmodhi4>
 6cc:	89 2b       	or	r24, r25
 6ce:	79 f5       	brne	.+94     	; 0x72e <main+0x1fe>
			noOfPulse = 0;
 6d0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <noOfPulse+0x1>
 6d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <noOfPulse>
			if(bpm_count > 16){
 6d8:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <bpm_count>
 6dc:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <bpm_count+0x1>
 6e0:	41 97       	sbiw	r24, 0x11	; 17
 6e2:	34 f0       	brlt	.+12     	; 0x6f0 <main+0x1c0>
				bpm_count = 16;
 6e4:	80 e1       	ldi	r24, 0x10	; 16
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <bpm_count+0x1>
 6ec:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <bpm_count>
			}
			itoa(bpm_count*6,pulse_bpm,10);
 6f0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <bpm_count>
 6f4:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <bpm_count+0x1>
 6f8:	9c 01       	movw	r18, r24
 6fa:	22 0f       	add	r18, r18
 6fc:	33 1f       	adc	r19, r19
 6fe:	82 0f       	add	r24, r18
 700:	93 1f       	adc	r25, r19
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	4a e0       	ldi	r20, 0x0A	; 10
 708:	68 ea       	ldi	r22, 0xA8	; 168
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	0e 94 20 04 	call	0x840	; 0x840 <__itoa_ncheck>
		
			lcd_gotoxy(13,0);
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	8d e0       	ldi	r24, 0x0D	; 13
 714:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts(pulse_bpm);
 718:	88 ea       	ldi	r24, 0xA8	; 168
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			bpm_count=0;
 720:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <bpm_count+0x1>
 724:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <bpm_count>
			isPulseDetected = false;
 728:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end>
 72c:	23 c0       	rjmp	.+70     	; 0x774 <main+0x244>
			//_delay_ms(50);			
		}
		else{
			uint16_t adc_volt = ADC_Read(0);
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ADC_Read>
			
			if(adc_volt > thresh && !isPulseDetected){
 734:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <thresh>
 738:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <thresh+0x1>
 73c:	28 17       	cp	r18, r24
 73e:	39 07       	cpc	r19, r25
 740:	88 f4       	brcc	.+34     	; 0x764 <main+0x234>
 742:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 746:	81 11       	cpse	r24, r1
 748:	0d c0       	rjmp	.+26     	; 0x764 <main+0x234>
				bpm_count+=1;
 74a:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <bpm_count>
 74e:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <bpm_count+0x1>
 752:	01 96       	adiw	r24, 0x01	; 1
 754:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <bpm_count+0x1>
 758:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <bpm_count>
				isPulseDetected = true;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
 762:	02 c0       	rjmp	.+4      	; 0x768 <main+0x238>
			}
			else{
				isPulseDetected = false;
 764:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end>
 768:	83 ed       	ldi	r24, 0xD3	; 211
 76a:	90 e3       	ldi	r25, 0x30	; 48
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <main+0x23c>
 770:	00 c0       	rjmp	.+0      	; 0x772 <main+0x242>
 772:	00 00       	nop
 774:	83 ed       	ldi	r24, 0xD3	; 211
 776:	90 e3       	ldi	r25, 0x30	; 48
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	f1 f7       	brne	.-4      	; 0x778 <main+0x248>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <main+0x24e>
 77e:	00 00       	nop
 780:	16 cf       	rjmp	.-468    	; 0x5ae <main+0x7e>

00000782 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
 782:	11 b8       	out	0x01, r1	; 1
 784:	8c e0       	ldi	r24, 0x0C	; 12
 786:	80 b9       	out	0x00, r24	; 0
 788:	08 95       	ret

0000078a <i2c_start>:
 78a:	94 ea       	ldi	r25, 0xA4	; 164
 78c:	96 bf       	out	0x36, r25	; 54
 78e:	06 b6       	in	r0, 0x36	; 54
 790:	07 fe       	sbrs	r0, 7
 792:	fd cf       	rjmp	.-6      	; 0x78e <i2c_start+0x4>
 794:	91 b1       	in	r25, 0x01	; 1
 796:	98 7f       	andi	r25, 0xF8	; 248
 798:	98 30       	cpi	r25, 0x08	; 8
 79a:	11 f0       	breq	.+4      	; 0x7a0 <i2c_start+0x16>
 79c:	90 31       	cpi	r25, 0x10	; 16
 79e:	71 f4       	brne	.+28     	; 0x7bc <i2c_start+0x32>
 7a0:	83 b9       	out	0x03, r24	; 3
 7a2:	84 e8       	ldi	r24, 0x84	; 132
 7a4:	86 bf       	out	0x36, r24	; 54
 7a6:	06 b6       	in	r0, 0x36	; 54
 7a8:	07 fe       	sbrs	r0, 7
 7aa:	fd cf       	rjmp	.-6      	; 0x7a6 <i2c_start+0x1c>
 7ac:	81 b1       	in	r24, 0x01	; 1
 7ae:	88 7f       	andi	r24, 0xF8	; 248
 7b0:	88 31       	cpi	r24, 0x18	; 24
 7b2:	31 f0       	breq	.+12     	; 0x7c0 <i2c_start+0x36>
 7b4:	80 34       	cpi	r24, 0x40	; 64
 7b6:	31 f4       	brne	.+12     	; 0x7c4 <i2c_start+0x3a>
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	08 95       	ret
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	08 95       	ret
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	08 95       	ret
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	08 95       	ret

000007c8 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 7c8:	84 e9       	ldi	r24, 0x94	; 148
 7ca:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 7cc:	06 b6       	in	r0, 0x36	; 54
 7ce:	04 fc       	sbrc	r0, 4
 7d0:	fd cf       	rjmp	.-6      	; 0x7cc <i2c_stop+0x4>

}/* i2c_stop */
 7d2:	08 95       	ret

000007d4 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 7d4:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 7d6:	84 e8       	ldi	r24, 0x84	; 132
 7d8:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 7da:	06 b6       	in	r0, 0x36	; 54
 7dc:	07 fe       	sbrs	r0, 7
 7de:	fd cf       	rjmp	.-6      	; 0x7da <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 7e0:	81 b1       	in	r24, 0x01	; 1
 7e2:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
 7e4:	88 32       	cpi	r24, 0x28	; 40
 7e6:	11 f0       	breq	.+4      	; 0x7ec <i2c_write+0x18>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	08 95       	ret
	return 0;
 7ec:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 7ee:	08 95       	ret

000007f0 <__divmodhi4>:
 7f0:	97 fb       	bst	r25, 7
 7f2:	07 2e       	mov	r0, r23
 7f4:	16 f4       	brtc	.+4      	; 0x7fa <__divmodhi4+0xa>
 7f6:	00 94       	com	r0
 7f8:	07 d0       	rcall	.+14     	; 0x808 <__divmodhi4_neg1>
 7fa:	77 fd       	sbrc	r23, 7
 7fc:	09 d0       	rcall	.+18     	; 0x810 <__divmodhi4_neg2>
 7fe:	0e 94 0c 04 	call	0x818	; 0x818 <__udivmodhi4>
 802:	07 fc       	sbrc	r0, 7
 804:	05 d0       	rcall	.+10     	; 0x810 <__divmodhi4_neg2>
 806:	3e f4       	brtc	.+14     	; 0x816 <__divmodhi4_exit>

00000808 <__divmodhi4_neg1>:
 808:	90 95       	com	r25
 80a:	81 95       	neg	r24
 80c:	9f 4f       	sbci	r25, 0xFF	; 255
 80e:	08 95       	ret

00000810 <__divmodhi4_neg2>:
 810:	70 95       	com	r23
 812:	61 95       	neg	r22
 814:	7f 4f       	sbci	r23, 0xFF	; 255

00000816 <__divmodhi4_exit>:
 816:	08 95       	ret

00000818 <__udivmodhi4>:
 818:	aa 1b       	sub	r26, r26
 81a:	bb 1b       	sub	r27, r27
 81c:	51 e1       	ldi	r21, 0x11	; 17
 81e:	07 c0       	rjmp	.+14     	; 0x82e <__udivmodhi4_ep>

00000820 <__udivmodhi4_loop>:
 820:	aa 1f       	adc	r26, r26
 822:	bb 1f       	adc	r27, r27
 824:	a6 17       	cp	r26, r22
 826:	b7 07       	cpc	r27, r23
 828:	10 f0       	brcs	.+4      	; 0x82e <__udivmodhi4_ep>
 82a:	a6 1b       	sub	r26, r22
 82c:	b7 0b       	sbc	r27, r23

0000082e <__udivmodhi4_ep>:
 82e:	88 1f       	adc	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	5a 95       	dec	r21
 834:	a9 f7       	brne	.-22     	; 0x820 <__udivmodhi4_loop>
 836:	80 95       	com	r24
 838:	90 95       	com	r25
 83a:	bc 01       	movw	r22, r24
 83c:	cd 01       	movw	r24, r26
 83e:	08 95       	ret

00000840 <__itoa_ncheck>:
 840:	bb 27       	eor	r27, r27
 842:	4a 30       	cpi	r20, 0x0A	; 10
 844:	31 f4       	brne	.+12     	; 0x852 <__itoa_ncheck+0x12>
 846:	99 23       	and	r25, r25
 848:	22 f4       	brpl	.+8      	; 0x852 <__itoa_ncheck+0x12>
 84a:	bd e2       	ldi	r27, 0x2D	; 45
 84c:	90 95       	com	r25
 84e:	81 95       	neg	r24
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	0c 94 2c 04 	jmp	0x858	; 0x858 <__utoa_common>

00000856 <__utoa_ncheck>:
 856:	bb 27       	eor	r27, r27

00000858 <__utoa_common>:
 858:	fb 01       	movw	r30, r22
 85a:	55 27       	eor	r21, r21
 85c:	aa 27       	eor	r26, r26
 85e:	88 0f       	add	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	aa 1f       	adc	r26, r26
 864:	a4 17       	cp	r26, r20
 866:	10 f0       	brcs	.+4      	; 0x86c <__stack+0xd>
 868:	a4 1b       	sub	r26, r20
 86a:	83 95       	inc	r24
 86c:	50 51       	subi	r21, 0x10	; 16
 86e:	b9 f7       	brne	.-18     	; 0x85e <__utoa_common+0x6>
 870:	a0 5d       	subi	r26, 0xD0	; 208
 872:	aa 33       	cpi	r26, 0x3A	; 58
 874:	08 f0       	brcs	.+2      	; 0x878 <__stack+0x19>
 876:	a9 5d       	subi	r26, 0xD9	; 217
 878:	a1 93       	st	Z+, r26
 87a:	00 97       	sbiw	r24, 0x00	; 0
 87c:	79 f7       	brne	.-34     	; 0x85c <__utoa_common+0x4>
 87e:	b1 11       	cpse	r27, r1
 880:	b1 93       	st	Z+, r27
 882:	11 92       	st	Z+, r1
 884:	cb 01       	movw	r24, r22
 886:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <strrev>

0000088a <sprintf>:
 88a:	ae e0       	ldi	r26, 0x0E	; 14
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	eb e4       	ldi	r30, 0x4B	; 75
 890:	f4 e0       	ldi	r31, 0x04	; 4
 892:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__prologue_saves__+0x1c>
 896:	0d 89       	ldd	r16, Y+21	; 0x15
 898:	1e 89       	ldd	r17, Y+22	; 0x16
 89a:	86 e0       	ldi	r24, 0x06	; 6
 89c:	8c 83       	std	Y+4, r24	; 0x04
 89e:	1a 83       	std	Y+2, r17	; 0x02
 8a0:	09 83       	std	Y+1, r16	; 0x01
 8a2:	8f ef       	ldi	r24, 0xFF	; 255
 8a4:	9f e7       	ldi	r25, 0x7F	; 127
 8a6:	9e 83       	std	Y+6, r25	; 0x06
 8a8:	8d 83       	std	Y+5, r24	; 0x05
 8aa:	ae 01       	movw	r20, r28
 8ac:	47 5e       	subi	r20, 0xE7	; 231
 8ae:	5f 4f       	sbci	r21, 0xFF	; 255
 8b0:	6f 89       	ldd	r22, Y+23	; 0x17
 8b2:	78 8d       	ldd	r23, Y+24	; 0x18
 8b4:	ce 01       	movw	r24, r28
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	0e 94 67 04 	call	0x8ce	; 0x8ce <vfprintf>
 8bc:	ef 81       	ldd	r30, Y+7	; 0x07
 8be:	f8 85       	ldd	r31, Y+8	; 0x08
 8c0:	e0 0f       	add	r30, r16
 8c2:	f1 1f       	adc	r31, r17
 8c4:	10 82       	st	Z, r1
 8c6:	2e 96       	adiw	r28, 0x0e	; 14
 8c8:	e4 e0       	ldi	r30, 0x04	; 4
 8ca:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__epilogue_restores__+0x1c>

000008ce <vfprintf>:
 8ce:	ab e0       	ldi	r26, 0x0B	; 11
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	ed e6       	ldi	r30, 0x6D	; 109
 8d4:	f4 e0       	ldi	r31, 0x04	; 4
 8d6:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__prologue_saves__>
 8da:	6c 01       	movw	r12, r24
 8dc:	7b 01       	movw	r14, r22
 8de:	8a 01       	movw	r16, r20
 8e0:	fc 01       	movw	r30, r24
 8e2:	17 82       	std	Z+7, r1	; 0x07
 8e4:	16 82       	std	Z+6, r1	; 0x06
 8e6:	83 81       	ldd	r24, Z+3	; 0x03
 8e8:	81 ff       	sbrs	r24, 1
 8ea:	cc c1       	rjmp	.+920    	; 0xc84 <vfprintf+0x3b6>
 8ec:	ce 01       	movw	r24, r28
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	3c 01       	movw	r6, r24
 8f2:	f6 01       	movw	r30, r12
 8f4:	93 81       	ldd	r25, Z+3	; 0x03
 8f6:	f7 01       	movw	r30, r14
 8f8:	93 fd       	sbrc	r25, 3
 8fa:	85 91       	lpm	r24, Z+
 8fc:	93 ff       	sbrs	r25, 3
 8fe:	81 91       	ld	r24, Z+
 900:	7f 01       	movw	r14, r30
 902:	88 23       	and	r24, r24
 904:	09 f4       	brne	.+2      	; 0x908 <vfprintf+0x3a>
 906:	ba c1       	rjmp	.+884    	; 0xc7c <vfprintf+0x3ae>
 908:	85 32       	cpi	r24, 0x25	; 37
 90a:	39 f4       	brne	.+14     	; 0x91a <vfprintf+0x4c>
 90c:	93 fd       	sbrc	r25, 3
 90e:	85 91       	lpm	r24, Z+
 910:	93 ff       	sbrs	r25, 3
 912:	81 91       	ld	r24, Z+
 914:	7f 01       	movw	r14, r30
 916:	85 32       	cpi	r24, 0x25	; 37
 918:	29 f4       	brne	.+10     	; 0x924 <vfprintf+0x56>
 91a:	b6 01       	movw	r22, r12
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 922:	e7 cf       	rjmp	.-50     	; 0x8f2 <vfprintf+0x24>
 924:	91 2c       	mov	r9, r1
 926:	21 2c       	mov	r2, r1
 928:	31 2c       	mov	r3, r1
 92a:	ff e1       	ldi	r31, 0x1F	; 31
 92c:	f3 15       	cp	r31, r3
 92e:	d8 f0       	brcs	.+54     	; 0x966 <vfprintf+0x98>
 930:	8b 32       	cpi	r24, 0x2B	; 43
 932:	79 f0       	breq	.+30     	; 0x952 <vfprintf+0x84>
 934:	38 f4       	brcc	.+14     	; 0x944 <vfprintf+0x76>
 936:	80 32       	cpi	r24, 0x20	; 32
 938:	79 f0       	breq	.+30     	; 0x958 <vfprintf+0x8a>
 93a:	83 32       	cpi	r24, 0x23	; 35
 93c:	a1 f4       	brne	.+40     	; 0x966 <vfprintf+0x98>
 93e:	23 2d       	mov	r18, r3
 940:	20 61       	ori	r18, 0x10	; 16
 942:	1d c0       	rjmp	.+58     	; 0x97e <vfprintf+0xb0>
 944:	8d 32       	cpi	r24, 0x2D	; 45
 946:	61 f0       	breq	.+24     	; 0x960 <vfprintf+0x92>
 948:	80 33       	cpi	r24, 0x30	; 48
 94a:	69 f4       	brne	.+26     	; 0x966 <vfprintf+0x98>
 94c:	23 2d       	mov	r18, r3
 94e:	21 60       	ori	r18, 0x01	; 1
 950:	16 c0       	rjmp	.+44     	; 0x97e <vfprintf+0xb0>
 952:	83 2d       	mov	r24, r3
 954:	82 60       	ori	r24, 0x02	; 2
 956:	38 2e       	mov	r3, r24
 958:	e3 2d       	mov	r30, r3
 95a:	e4 60       	ori	r30, 0x04	; 4
 95c:	3e 2e       	mov	r3, r30
 95e:	2a c0       	rjmp	.+84     	; 0x9b4 <vfprintf+0xe6>
 960:	f3 2d       	mov	r31, r3
 962:	f8 60       	ori	r31, 0x08	; 8
 964:	1d c0       	rjmp	.+58     	; 0x9a0 <vfprintf+0xd2>
 966:	37 fc       	sbrc	r3, 7
 968:	2d c0       	rjmp	.+90     	; 0x9c4 <vfprintf+0xf6>
 96a:	20 ed       	ldi	r18, 0xD0	; 208
 96c:	28 0f       	add	r18, r24
 96e:	2a 30       	cpi	r18, 0x0A	; 10
 970:	40 f0       	brcs	.+16     	; 0x982 <vfprintf+0xb4>
 972:	8e 32       	cpi	r24, 0x2E	; 46
 974:	b9 f4       	brne	.+46     	; 0x9a4 <vfprintf+0xd6>
 976:	36 fc       	sbrc	r3, 6
 978:	81 c1       	rjmp	.+770    	; 0xc7c <vfprintf+0x3ae>
 97a:	23 2d       	mov	r18, r3
 97c:	20 64       	ori	r18, 0x40	; 64
 97e:	32 2e       	mov	r3, r18
 980:	19 c0       	rjmp	.+50     	; 0x9b4 <vfprintf+0xe6>
 982:	36 fe       	sbrs	r3, 6
 984:	06 c0       	rjmp	.+12     	; 0x992 <vfprintf+0xc4>
 986:	8a e0       	ldi	r24, 0x0A	; 10
 988:	98 9e       	mul	r9, r24
 98a:	20 0d       	add	r18, r0
 98c:	11 24       	eor	r1, r1
 98e:	92 2e       	mov	r9, r18
 990:	11 c0       	rjmp	.+34     	; 0x9b4 <vfprintf+0xe6>
 992:	ea e0       	ldi	r30, 0x0A	; 10
 994:	2e 9e       	mul	r2, r30
 996:	20 0d       	add	r18, r0
 998:	11 24       	eor	r1, r1
 99a:	22 2e       	mov	r2, r18
 99c:	f3 2d       	mov	r31, r3
 99e:	f0 62       	ori	r31, 0x20	; 32
 9a0:	3f 2e       	mov	r3, r31
 9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <vfprintf+0xe6>
 9a4:	8c 36       	cpi	r24, 0x6C	; 108
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <vfprintf+0xe2>
 9a8:	83 2d       	mov	r24, r3
 9aa:	80 68       	ori	r24, 0x80	; 128
 9ac:	38 2e       	mov	r3, r24
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <vfprintf+0xe6>
 9b0:	88 36       	cpi	r24, 0x68	; 104
 9b2:	41 f4       	brne	.+16     	; 0x9c4 <vfprintf+0xf6>
 9b4:	f7 01       	movw	r30, r14
 9b6:	93 fd       	sbrc	r25, 3
 9b8:	85 91       	lpm	r24, Z+
 9ba:	93 ff       	sbrs	r25, 3
 9bc:	81 91       	ld	r24, Z+
 9be:	7f 01       	movw	r14, r30
 9c0:	81 11       	cpse	r24, r1
 9c2:	b3 cf       	rjmp	.-154    	; 0x92a <vfprintf+0x5c>
 9c4:	98 2f       	mov	r25, r24
 9c6:	9f 7d       	andi	r25, 0xDF	; 223
 9c8:	95 54       	subi	r25, 0x45	; 69
 9ca:	93 30       	cpi	r25, 0x03	; 3
 9cc:	28 f4       	brcc	.+10     	; 0x9d8 <vfprintf+0x10a>
 9ce:	0c 5f       	subi	r16, 0xFC	; 252
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	9f e3       	ldi	r25, 0x3F	; 63
 9d4:	99 83       	std	Y+1, r25	; 0x01
 9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <vfprintf+0x124>
 9d8:	83 36       	cpi	r24, 0x63	; 99
 9da:	31 f0       	breq	.+12     	; 0x9e8 <vfprintf+0x11a>
 9dc:	83 37       	cpi	r24, 0x73	; 115
 9de:	71 f0       	breq	.+28     	; 0x9fc <vfprintf+0x12e>
 9e0:	83 35       	cpi	r24, 0x53	; 83
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <vfprintf+0x118>
 9e4:	59 c0       	rjmp	.+178    	; 0xa98 <vfprintf+0x1ca>
 9e6:	21 c0       	rjmp	.+66     	; 0xa2a <vfprintf+0x15c>
 9e8:	f8 01       	movw	r30, r16
 9ea:	80 81       	ld	r24, Z
 9ec:	89 83       	std	Y+1, r24	; 0x01
 9ee:	0e 5f       	subi	r16, 0xFE	; 254
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	88 24       	eor	r8, r8
 9f4:	83 94       	inc	r8
 9f6:	91 2c       	mov	r9, r1
 9f8:	53 01       	movw	r10, r6
 9fa:	13 c0       	rjmp	.+38     	; 0xa22 <vfprintf+0x154>
 9fc:	28 01       	movw	r4, r16
 9fe:	f2 e0       	ldi	r31, 0x02	; 2
 a00:	4f 0e       	add	r4, r31
 a02:	51 1c       	adc	r5, r1
 a04:	f8 01       	movw	r30, r16
 a06:	a0 80       	ld	r10, Z
 a08:	b1 80       	ldd	r11, Z+1	; 0x01
 a0a:	36 fe       	sbrs	r3, 6
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <vfprintf+0x146>
 a0e:	69 2d       	mov	r22, r9
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <vfprintf+0x14a>
 a14:	6f ef       	ldi	r22, 0xFF	; 255
 a16:	7f ef       	ldi	r23, 0xFF	; 255
 a18:	c5 01       	movw	r24, r10
 a1a:	0e 94 53 06 	call	0xca6	; 0xca6 <strnlen>
 a1e:	4c 01       	movw	r8, r24
 a20:	82 01       	movw	r16, r4
 a22:	f3 2d       	mov	r31, r3
 a24:	ff 77       	andi	r31, 0x7F	; 127
 a26:	3f 2e       	mov	r3, r31
 a28:	16 c0       	rjmp	.+44     	; 0xa56 <vfprintf+0x188>
 a2a:	28 01       	movw	r4, r16
 a2c:	22 e0       	ldi	r18, 0x02	; 2
 a2e:	42 0e       	add	r4, r18
 a30:	51 1c       	adc	r5, r1
 a32:	f8 01       	movw	r30, r16
 a34:	a0 80       	ld	r10, Z
 a36:	b1 80       	ldd	r11, Z+1	; 0x01
 a38:	36 fe       	sbrs	r3, 6
 a3a:	03 c0       	rjmp	.+6      	; 0xa42 <vfprintf+0x174>
 a3c:	69 2d       	mov	r22, r9
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <vfprintf+0x178>
 a42:	6f ef       	ldi	r22, 0xFF	; 255
 a44:	7f ef       	ldi	r23, 0xFF	; 255
 a46:	c5 01       	movw	r24, r10
 a48:	0e 94 48 06 	call	0xc90	; 0xc90 <strnlen_P>
 a4c:	4c 01       	movw	r8, r24
 a4e:	f3 2d       	mov	r31, r3
 a50:	f0 68       	ori	r31, 0x80	; 128
 a52:	3f 2e       	mov	r3, r31
 a54:	82 01       	movw	r16, r4
 a56:	33 fc       	sbrc	r3, 3
 a58:	1b c0       	rjmp	.+54     	; 0xa90 <vfprintf+0x1c2>
 a5a:	82 2d       	mov	r24, r2
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	88 16       	cp	r8, r24
 a60:	99 06       	cpc	r9, r25
 a62:	b0 f4       	brcc	.+44     	; 0xa90 <vfprintf+0x1c2>
 a64:	b6 01       	movw	r22, r12
 a66:	80 e2       	ldi	r24, 0x20	; 32
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 a6e:	2a 94       	dec	r2
 a70:	f4 cf       	rjmp	.-24     	; 0xa5a <vfprintf+0x18c>
 a72:	f5 01       	movw	r30, r10
 a74:	37 fc       	sbrc	r3, 7
 a76:	85 91       	lpm	r24, Z+
 a78:	37 fe       	sbrs	r3, 7
 a7a:	81 91       	ld	r24, Z+
 a7c:	5f 01       	movw	r10, r30
 a7e:	b6 01       	movw	r22, r12
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 a86:	21 10       	cpse	r2, r1
 a88:	2a 94       	dec	r2
 a8a:	21 e0       	ldi	r18, 0x01	; 1
 a8c:	82 1a       	sub	r8, r18
 a8e:	91 08       	sbc	r9, r1
 a90:	81 14       	cp	r8, r1
 a92:	91 04       	cpc	r9, r1
 a94:	71 f7       	brne	.-36     	; 0xa72 <vfprintf+0x1a4>
 a96:	e8 c0       	rjmp	.+464    	; 0xc68 <vfprintf+0x39a>
 a98:	84 36       	cpi	r24, 0x64	; 100
 a9a:	11 f0       	breq	.+4      	; 0xaa0 <vfprintf+0x1d2>
 a9c:	89 36       	cpi	r24, 0x69	; 105
 a9e:	41 f5       	brne	.+80     	; 0xaf0 <vfprintf+0x222>
 aa0:	f8 01       	movw	r30, r16
 aa2:	37 fe       	sbrs	r3, 7
 aa4:	07 c0       	rjmp	.+14     	; 0xab4 <vfprintf+0x1e6>
 aa6:	60 81       	ld	r22, Z
 aa8:	71 81       	ldd	r23, Z+1	; 0x01
 aaa:	82 81       	ldd	r24, Z+2	; 0x02
 aac:	93 81       	ldd	r25, Z+3	; 0x03
 aae:	0c 5f       	subi	r16, 0xFC	; 252
 ab0:	1f 4f       	sbci	r17, 0xFF	; 255
 ab2:	08 c0       	rjmp	.+16     	; 0xac4 <vfprintf+0x1f6>
 ab4:	60 81       	ld	r22, Z
 ab6:	71 81       	ldd	r23, Z+1	; 0x01
 ab8:	07 2e       	mov	r0, r23
 aba:	00 0c       	add	r0, r0
 abc:	88 0b       	sbc	r24, r24
 abe:	99 0b       	sbc	r25, r25
 ac0:	0e 5f       	subi	r16, 0xFE	; 254
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	f3 2d       	mov	r31, r3
 ac6:	ff 76       	andi	r31, 0x6F	; 111
 ac8:	3f 2e       	mov	r3, r31
 aca:	97 ff       	sbrs	r25, 7
 acc:	09 c0       	rjmp	.+18     	; 0xae0 <vfprintf+0x212>
 ace:	90 95       	com	r25
 ad0:	80 95       	com	r24
 ad2:	70 95       	com	r23
 ad4:	61 95       	neg	r22
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	f0 68       	ori	r31, 0x80	; 128
 ade:	3f 2e       	mov	r3, r31
 ae0:	2a e0       	ldi	r18, 0x0A	; 10
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	a3 01       	movw	r20, r6
 ae6:	0e 94 aa 06 	call	0xd54	; 0xd54 <__ultoa_invert>
 aea:	88 2e       	mov	r8, r24
 aec:	86 18       	sub	r8, r6
 aee:	45 c0       	rjmp	.+138    	; 0xb7a <vfprintf+0x2ac>
 af0:	85 37       	cpi	r24, 0x75	; 117
 af2:	31 f4       	brne	.+12     	; 0xb00 <vfprintf+0x232>
 af4:	23 2d       	mov	r18, r3
 af6:	2f 7e       	andi	r18, 0xEF	; 239
 af8:	b2 2e       	mov	r11, r18
 afa:	2a e0       	ldi	r18, 0x0A	; 10
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	25 c0       	rjmp	.+74     	; 0xb4a <vfprintf+0x27c>
 b00:	93 2d       	mov	r25, r3
 b02:	99 7f       	andi	r25, 0xF9	; 249
 b04:	b9 2e       	mov	r11, r25
 b06:	8f 36       	cpi	r24, 0x6F	; 111
 b08:	c1 f0       	breq	.+48     	; 0xb3a <vfprintf+0x26c>
 b0a:	18 f4       	brcc	.+6      	; 0xb12 <vfprintf+0x244>
 b0c:	88 35       	cpi	r24, 0x58	; 88
 b0e:	79 f0       	breq	.+30     	; 0xb2e <vfprintf+0x260>
 b10:	b5 c0       	rjmp	.+362    	; 0xc7c <vfprintf+0x3ae>
 b12:	80 37       	cpi	r24, 0x70	; 112
 b14:	19 f0       	breq	.+6      	; 0xb1c <vfprintf+0x24e>
 b16:	88 37       	cpi	r24, 0x78	; 120
 b18:	21 f0       	breq	.+8      	; 0xb22 <vfprintf+0x254>
 b1a:	b0 c0       	rjmp	.+352    	; 0xc7c <vfprintf+0x3ae>
 b1c:	e9 2f       	mov	r30, r25
 b1e:	e0 61       	ori	r30, 0x10	; 16
 b20:	be 2e       	mov	r11, r30
 b22:	b4 fe       	sbrs	r11, 4
 b24:	0d c0       	rjmp	.+26     	; 0xb40 <vfprintf+0x272>
 b26:	fb 2d       	mov	r31, r11
 b28:	f4 60       	ori	r31, 0x04	; 4
 b2a:	bf 2e       	mov	r11, r31
 b2c:	09 c0       	rjmp	.+18     	; 0xb40 <vfprintf+0x272>
 b2e:	34 fe       	sbrs	r3, 4
 b30:	0a c0       	rjmp	.+20     	; 0xb46 <vfprintf+0x278>
 b32:	29 2f       	mov	r18, r25
 b34:	26 60       	ori	r18, 0x06	; 6
 b36:	b2 2e       	mov	r11, r18
 b38:	06 c0       	rjmp	.+12     	; 0xb46 <vfprintf+0x278>
 b3a:	28 e0       	ldi	r18, 0x08	; 8
 b3c:	30 e0       	ldi	r19, 0x00	; 0
 b3e:	05 c0       	rjmp	.+10     	; 0xb4a <vfprintf+0x27c>
 b40:	20 e1       	ldi	r18, 0x10	; 16
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <vfprintf+0x27c>
 b46:	20 e1       	ldi	r18, 0x10	; 16
 b48:	32 e0       	ldi	r19, 0x02	; 2
 b4a:	f8 01       	movw	r30, r16
 b4c:	b7 fe       	sbrs	r11, 7
 b4e:	07 c0       	rjmp	.+14     	; 0xb5e <vfprintf+0x290>
 b50:	60 81       	ld	r22, Z
 b52:	71 81       	ldd	r23, Z+1	; 0x01
 b54:	82 81       	ldd	r24, Z+2	; 0x02
 b56:	93 81       	ldd	r25, Z+3	; 0x03
 b58:	0c 5f       	subi	r16, 0xFC	; 252
 b5a:	1f 4f       	sbci	r17, 0xFF	; 255
 b5c:	06 c0       	rjmp	.+12     	; 0xb6a <vfprintf+0x29c>
 b5e:	60 81       	ld	r22, Z
 b60:	71 81       	ldd	r23, Z+1	; 0x01
 b62:	80 e0       	ldi	r24, 0x00	; 0
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	0e 5f       	subi	r16, 0xFE	; 254
 b68:	1f 4f       	sbci	r17, 0xFF	; 255
 b6a:	a3 01       	movw	r20, r6
 b6c:	0e 94 aa 06 	call	0xd54	; 0xd54 <__ultoa_invert>
 b70:	88 2e       	mov	r8, r24
 b72:	86 18       	sub	r8, r6
 b74:	fb 2d       	mov	r31, r11
 b76:	ff 77       	andi	r31, 0x7F	; 127
 b78:	3f 2e       	mov	r3, r31
 b7a:	36 fe       	sbrs	r3, 6
 b7c:	0d c0       	rjmp	.+26     	; 0xb98 <vfprintf+0x2ca>
 b7e:	23 2d       	mov	r18, r3
 b80:	2e 7f       	andi	r18, 0xFE	; 254
 b82:	a2 2e       	mov	r10, r18
 b84:	89 14       	cp	r8, r9
 b86:	58 f4       	brcc	.+22     	; 0xb9e <vfprintf+0x2d0>
 b88:	34 fe       	sbrs	r3, 4
 b8a:	0b c0       	rjmp	.+22     	; 0xba2 <vfprintf+0x2d4>
 b8c:	32 fc       	sbrc	r3, 2
 b8e:	09 c0       	rjmp	.+18     	; 0xba2 <vfprintf+0x2d4>
 b90:	83 2d       	mov	r24, r3
 b92:	8e 7e       	andi	r24, 0xEE	; 238
 b94:	a8 2e       	mov	r10, r24
 b96:	05 c0       	rjmp	.+10     	; 0xba2 <vfprintf+0x2d4>
 b98:	b8 2c       	mov	r11, r8
 b9a:	a3 2c       	mov	r10, r3
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <vfprintf+0x2d6>
 b9e:	b8 2c       	mov	r11, r8
 ba0:	01 c0       	rjmp	.+2      	; 0xba4 <vfprintf+0x2d6>
 ba2:	b9 2c       	mov	r11, r9
 ba4:	a4 fe       	sbrs	r10, 4
 ba6:	0f c0       	rjmp	.+30     	; 0xbc6 <vfprintf+0x2f8>
 ba8:	fe 01       	movw	r30, r28
 baa:	e8 0d       	add	r30, r8
 bac:	f1 1d       	adc	r31, r1
 bae:	80 81       	ld	r24, Z
 bb0:	80 33       	cpi	r24, 0x30	; 48
 bb2:	21 f4       	brne	.+8      	; 0xbbc <vfprintf+0x2ee>
 bb4:	9a 2d       	mov	r25, r10
 bb6:	99 7e       	andi	r25, 0xE9	; 233
 bb8:	a9 2e       	mov	r10, r25
 bba:	09 c0       	rjmp	.+18     	; 0xbce <vfprintf+0x300>
 bbc:	a2 fe       	sbrs	r10, 2
 bbe:	06 c0       	rjmp	.+12     	; 0xbcc <vfprintf+0x2fe>
 bc0:	b3 94       	inc	r11
 bc2:	b3 94       	inc	r11
 bc4:	04 c0       	rjmp	.+8      	; 0xbce <vfprintf+0x300>
 bc6:	8a 2d       	mov	r24, r10
 bc8:	86 78       	andi	r24, 0x86	; 134
 bca:	09 f0       	breq	.+2      	; 0xbce <vfprintf+0x300>
 bcc:	b3 94       	inc	r11
 bce:	a3 fc       	sbrc	r10, 3
 bd0:	11 c0       	rjmp	.+34     	; 0xbf4 <vfprintf+0x326>
 bd2:	a0 fe       	sbrs	r10, 0
 bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <vfprintf+0x314>
 bd6:	b2 14       	cp	r11, r2
 bd8:	88 f4       	brcc	.+34     	; 0xbfc <vfprintf+0x32e>
 bda:	28 0c       	add	r2, r8
 bdc:	92 2c       	mov	r9, r2
 bde:	9b 18       	sub	r9, r11
 be0:	0e c0       	rjmp	.+28     	; 0xbfe <vfprintf+0x330>
 be2:	b2 14       	cp	r11, r2
 be4:	60 f4       	brcc	.+24     	; 0xbfe <vfprintf+0x330>
 be6:	b6 01       	movw	r22, r12
 be8:	80 e2       	ldi	r24, 0x20	; 32
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 bf0:	b3 94       	inc	r11
 bf2:	f7 cf       	rjmp	.-18     	; 0xbe2 <vfprintf+0x314>
 bf4:	b2 14       	cp	r11, r2
 bf6:	18 f4       	brcc	.+6      	; 0xbfe <vfprintf+0x330>
 bf8:	2b 18       	sub	r2, r11
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x332>
 bfc:	98 2c       	mov	r9, r8
 bfe:	21 2c       	mov	r2, r1
 c00:	a4 fe       	sbrs	r10, 4
 c02:	10 c0       	rjmp	.+32     	; 0xc24 <vfprintf+0x356>
 c04:	b6 01       	movw	r22, r12
 c06:	80 e3       	ldi	r24, 0x30	; 48
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c0e:	a2 fe       	sbrs	r10, 2
 c10:	17 c0       	rjmp	.+46     	; 0xc40 <vfprintf+0x372>
 c12:	a1 fc       	sbrc	r10, 1
 c14:	03 c0       	rjmp	.+6      	; 0xc1c <vfprintf+0x34e>
 c16:	88 e7       	ldi	r24, 0x78	; 120
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <vfprintf+0x352>
 c1c:	88 e5       	ldi	r24, 0x58	; 88
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	b6 01       	movw	r22, r12
 c22:	0c c0       	rjmp	.+24     	; 0xc3c <vfprintf+0x36e>
 c24:	8a 2d       	mov	r24, r10
 c26:	86 78       	andi	r24, 0x86	; 134
 c28:	59 f0       	breq	.+22     	; 0xc40 <vfprintf+0x372>
 c2a:	a1 fe       	sbrs	r10, 1
 c2c:	02 c0       	rjmp	.+4      	; 0xc32 <vfprintf+0x364>
 c2e:	8b e2       	ldi	r24, 0x2B	; 43
 c30:	01 c0       	rjmp	.+2      	; 0xc34 <vfprintf+0x366>
 c32:	80 e2       	ldi	r24, 0x20	; 32
 c34:	a7 fc       	sbrc	r10, 7
 c36:	8d e2       	ldi	r24, 0x2D	; 45
 c38:	b6 01       	movw	r22, r12
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c40:	89 14       	cp	r8, r9
 c42:	38 f4       	brcc	.+14     	; 0xc52 <vfprintf+0x384>
 c44:	b6 01       	movw	r22, r12
 c46:	80 e3       	ldi	r24, 0x30	; 48
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c4e:	9a 94       	dec	r9
 c50:	f7 cf       	rjmp	.-18     	; 0xc40 <vfprintf+0x372>
 c52:	8a 94       	dec	r8
 c54:	f3 01       	movw	r30, r6
 c56:	e8 0d       	add	r30, r8
 c58:	f1 1d       	adc	r31, r1
 c5a:	80 81       	ld	r24, Z
 c5c:	b6 01       	movw	r22, r12
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c64:	81 10       	cpse	r8, r1
 c66:	f5 cf       	rjmp	.-22     	; 0xc52 <vfprintf+0x384>
 c68:	22 20       	and	r2, r2
 c6a:	09 f4       	brne	.+2      	; 0xc6e <vfprintf+0x3a0>
 c6c:	42 ce       	rjmp	.-892    	; 0x8f2 <vfprintf+0x24>
 c6e:	b6 01       	movw	r22, r12
 c70:	80 e2       	ldi	r24, 0x20	; 32
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 6e 06 	call	0xcdc	; 0xcdc <fputc>
 c78:	2a 94       	dec	r2
 c7a:	f6 cf       	rjmp	.-20     	; 0xc68 <vfprintf+0x39a>
 c7c:	f6 01       	movw	r30, r12
 c7e:	86 81       	ldd	r24, Z+6	; 0x06
 c80:	97 81       	ldd	r25, Z+7	; 0x07
 c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0x3ba>
 c84:	8f ef       	ldi	r24, 0xFF	; 255
 c86:	9f ef       	ldi	r25, 0xFF	; 255
 c88:	2b 96       	adiw	r28, 0x0b	; 11
 c8a:	e2 e1       	ldi	r30, 0x12	; 18
 c8c:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__epilogue_restores__>

00000c90 <strnlen_P>:
 c90:	fc 01       	movw	r30, r24
 c92:	05 90       	lpm	r0, Z+
 c94:	61 50       	subi	r22, 0x01	; 1
 c96:	70 40       	sbci	r23, 0x00	; 0
 c98:	01 10       	cpse	r0, r1
 c9a:	d8 f7       	brcc	.-10     	; 0xc92 <strnlen_P+0x2>
 c9c:	80 95       	com	r24
 c9e:	90 95       	com	r25
 ca0:	8e 0f       	add	r24, r30
 ca2:	9f 1f       	adc	r25, r31
 ca4:	08 95       	ret

00000ca6 <strnlen>:
 ca6:	fc 01       	movw	r30, r24
 ca8:	61 50       	subi	r22, 0x01	; 1
 caa:	70 40       	sbci	r23, 0x00	; 0
 cac:	01 90       	ld	r0, Z+
 cae:	01 10       	cpse	r0, r1
 cb0:	d8 f7       	brcc	.-10     	; 0xca8 <strnlen+0x2>
 cb2:	80 95       	com	r24
 cb4:	90 95       	com	r25
 cb6:	8e 0f       	add	r24, r30
 cb8:	9f 1f       	adc	r25, r31
 cba:	08 95       	ret

00000cbc <strrev>:
 cbc:	dc 01       	movw	r26, r24
 cbe:	fc 01       	movw	r30, r24
 cc0:	67 2f       	mov	r22, r23
 cc2:	71 91       	ld	r23, Z+
 cc4:	77 23       	and	r23, r23
 cc6:	e1 f7       	brne	.-8      	; 0xcc0 <strrev+0x4>
 cc8:	32 97       	sbiw	r30, 0x02	; 2
 cca:	04 c0       	rjmp	.+8      	; 0xcd4 <strrev+0x18>
 ccc:	7c 91       	ld	r23, X
 cce:	6d 93       	st	X+, r22
 cd0:	70 83       	st	Z, r23
 cd2:	62 91       	ld	r22, -Z
 cd4:	ae 17       	cp	r26, r30
 cd6:	bf 07       	cpc	r27, r31
 cd8:	c8 f3       	brcs	.-14     	; 0xccc <strrev+0x10>
 cda:	08 95       	ret

00000cdc <fputc>:
 cdc:	0f 93       	push	r16
 cde:	1f 93       	push	r17
 ce0:	cf 93       	push	r28
 ce2:	df 93       	push	r29
 ce4:	fb 01       	movw	r30, r22
 ce6:	23 81       	ldd	r18, Z+3	; 0x03
 ce8:	21 fd       	sbrc	r18, 1
 cea:	03 c0       	rjmp	.+6      	; 0xcf2 <fputc+0x16>
 cec:	8f ef       	ldi	r24, 0xFF	; 255
 cee:	9f ef       	ldi	r25, 0xFF	; 255
 cf0:	2c c0       	rjmp	.+88     	; 0xd4a <fputc+0x6e>
 cf2:	22 ff       	sbrs	r18, 2
 cf4:	16 c0       	rjmp	.+44     	; 0xd22 <fputc+0x46>
 cf6:	46 81       	ldd	r20, Z+6	; 0x06
 cf8:	57 81       	ldd	r21, Z+7	; 0x07
 cfa:	24 81       	ldd	r18, Z+4	; 0x04
 cfc:	35 81       	ldd	r19, Z+5	; 0x05
 cfe:	42 17       	cp	r20, r18
 d00:	53 07       	cpc	r21, r19
 d02:	44 f4       	brge	.+16     	; 0xd14 <fputc+0x38>
 d04:	a0 81       	ld	r26, Z
 d06:	b1 81       	ldd	r27, Z+1	; 0x01
 d08:	9d 01       	movw	r18, r26
 d0a:	2f 5f       	subi	r18, 0xFF	; 255
 d0c:	3f 4f       	sbci	r19, 0xFF	; 255
 d0e:	31 83       	std	Z+1, r19	; 0x01
 d10:	20 83       	st	Z, r18
 d12:	8c 93       	st	X, r24
 d14:	26 81       	ldd	r18, Z+6	; 0x06
 d16:	37 81       	ldd	r19, Z+7	; 0x07
 d18:	2f 5f       	subi	r18, 0xFF	; 255
 d1a:	3f 4f       	sbci	r19, 0xFF	; 255
 d1c:	37 83       	std	Z+7, r19	; 0x07
 d1e:	26 83       	std	Z+6, r18	; 0x06
 d20:	14 c0       	rjmp	.+40     	; 0xd4a <fputc+0x6e>
 d22:	8b 01       	movw	r16, r22
 d24:	ec 01       	movw	r28, r24
 d26:	fb 01       	movw	r30, r22
 d28:	00 84       	ldd	r0, Z+8	; 0x08
 d2a:	f1 85       	ldd	r31, Z+9	; 0x09
 d2c:	e0 2d       	mov	r30, r0
 d2e:	09 95       	icall
 d30:	89 2b       	or	r24, r25
 d32:	e1 f6       	brne	.-72     	; 0xcec <fputc+0x10>
 d34:	d8 01       	movw	r26, r16
 d36:	16 96       	adiw	r26, 0x06	; 6
 d38:	8d 91       	ld	r24, X+
 d3a:	9c 91       	ld	r25, X
 d3c:	17 97       	sbiw	r26, 0x07	; 7
 d3e:	01 96       	adiw	r24, 0x01	; 1
 d40:	17 96       	adiw	r26, 0x07	; 7
 d42:	9c 93       	st	X, r25
 d44:	8e 93       	st	-X, r24
 d46:	16 97       	sbiw	r26, 0x06	; 6
 d48:	ce 01       	movw	r24, r28
 d4a:	df 91       	pop	r29
 d4c:	cf 91       	pop	r28
 d4e:	1f 91       	pop	r17
 d50:	0f 91       	pop	r16
 d52:	08 95       	ret

00000d54 <__ultoa_invert>:
 d54:	fa 01       	movw	r30, r20
 d56:	aa 27       	eor	r26, r26
 d58:	28 30       	cpi	r18, 0x08	; 8
 d5a:	51 f1       	breq	.+84     	; 0xdb0 <__ultoa_invert+0x5c>
 d5c:	20 31       	cpi	r18, 0x10	; 16
 d5e:	81 f1       	breq	.+96     	; 0xdc0 <__ultoa_invert+0x6c>
 d60:	e8 94       	clt
 d62:	6f 93       	push	r22
 d64:	6e 7f       	andi	r22, 0xFE	; 254
 d66:	6e 5f       	subi	r22, 0xFE	; 254
 d68:	7f 4f       	sbci	r23, 0xFF	; 255
 d6a:	8f 4f       	sbci	r24, 0xFF	; 255
 d6c:	9f 4f       	sbci	r25, 0xFF	; 255
 d6e:	af 4f       	sbci	r26, 0xFF	; 255
 d70:	b1 e0       	ldi	r27, 0x01	; 1
 d72:	3e d0       	rcall	.+124    	; 0xdf0 <__ultoa_invert+0x9c>
 d74:	b4 e0       	ldi	r27, 0x04	; 4
 d76:	3c d0       	rcall	.+120    	; 0xdf0 <__ultoa_invert+0x9c>
 d78:	67 0f       	add	r22, r23
 d7a:	78 1f       	adc	r23, r24
 d7c:	89 1f       	adc	r24, r25
 d7e:	9a 1f       	adc	r25, r26
 d80:	a1 1d       	adc	r26, r1
 d82:	68 0f       	add	r22, r24
 d84:	79 1f       	adc	r23, r25
 d86:	8a 1f       	adc	r24, r26
 d88:	91 1d       	adc	r25, r1
 d8a:	a1 1d       	adc	r26, r1
 d8c:	6a 0f       	add	r22, r26
 d8e:	71 1d       	adc	r23, r1
 d90:	81 1d       	adc	r24, r1
 d92:	91 1d       	adc	r25, r1
 d94:	a1 1d       	adc	r26, r1
 d96:	20 d0       	rcall	.+64     	; 0xdd8 <__ultoa_invert+0x84>
 d98:	09 f4       	brne	.+2      	; 0xd9c <__ultoa_invert+0x48>
 d9a:	68 94       	set
 d9c:	3f 91       	pop	r19
 d9e:	2a e0       	ldi	r18, 0x0A	; 10
 da0:	26 9f       	mul	r18, r22
 da2:	11 24       	eor	r1, r1
 da4:	30 19       	sub	r19, r0
 da6:	30 5d       	subi	r19, 0xD0	; 208
 da8:	31 93       	st	Z+, r19
 daa:	de f6       	brtc	.-74     	; 0xd62 <__ultoa_invert+0xe>
 dac:	cf 01       	movw	r24, r30
 dae:	08 95       	ret
 db0:	46 2f       	mov	r20, r22
 db2:	47 70       	andi	r20, 0x07	; 7
 db4:	40 5d       	subi	r20, 0xD0	; 208
 db6:	41 93       	st	Z+, r20
 db8:	b3 e0       	ldi	r27, 0x03	; 3
 dba:	0f d0       	rcall	.+30     	; 0xdda <__ultoa_invert+0x86>
 dbc:	c9 f7       	brne	.-14     	; 0xdb0 <__ultoa_invert+0x5c>
 dbe:	f6 cf       	rjmp	.-20     	; 0xdac <__ultoa_invert+0x58>
 dc0:	46 2f       	mov	r20, r22
 dc2:	4f 70       	andi	r20, 0x0F	; 15
 dc4:	40 5d       	subi	r20, 0xD0	; 208
 dc6:	4a 33       	cpi	r20, 0x3A	; 58
 dc8:	18 f0       	brcs	.+6      	; 0xdd0 <__ultoa_invert+0x7c>
 dca:	49 5d       	subi	r20, 0xD9	; 217
 dcc:	31 fd       	sbrc	r19, 1
 dce:	40 52       	subi	r20, 0x20	; 32
 dd0:	41 93       	st	Z+, r20
 dd2:	02 d0       	rcall	.+4      	; 0xdd8 <__ultoa_invert+0x84>
 dd4:	a9 f7       	brne	.-22     	; 0xdc0 <__ultoa_invert+0x6c>
 dd6:	ea cf       	rjmp	.-44     	; 0xdac <__ultoa_invert+0x58>
 dd8:	b4 e0       	ldi	r27, 0x04	; 4
 dda:	a6 95       	lsr	r26
 ddc:	97 95       	ror	r25
 dde:	87 95       	ror	r24
 de0:	77 95       	ror	r23
 de2:	67 95       	ror	r22
 de4:	ba 95       	dec	r27
 de6:	c9 f7       	brne	.-14     	; 0xdda <__ultoa_invert+0x86>
 de8:	00 97       	sbiw	r24, 0x00	; 0
 dea:	61 05       	cpc	r22, r1
 dec:	71 05       	cpc	r23, r1
 dee:	08 95       	ret
 df0:	9b 01       	movw	r18, r22
 df2:	ac 01       	movw	r20, r24
 df4:	0a 2e       	mov	r0, r26
 df6:	06 94       	lsr	r0
 df8:	57 95       	ror	r21
 dfa:	47 95       	ror	r20
 dfc:	37 95       	ror	r19
 dfe:	27 95       	ror	r18
 e00:	ba 95       	dec	r27
 e02:	c9 f7       	brne	.-14     	; 0xdf6 <__ultoa_invert+0xa2>
 e04:	62 0f       	add	r22, r18
 e06:	73 1f       	adc	r23, r19
 e08:	84 1f       	adc	r24, r20
 e0a:	95 1f       	adc	r25, r21
 e0c:	a0 1d       	adc	r26, r0
 e0e:	08 95       	ret

00000e10 <__prologue_saves__>:
 e10:	2f 92       	push	r2
 e12:	3f 92       	push	r3
 e14:	4f 92       	push	r4
 e16:	5f 92       	push	r5
 e18:	6f 92       	push	r6
 e1a:	7f 92       	push	r7
 e1c:	8f 92       	push	r8
 e1e:	9f 92       	push	r9
 e20:	af 92       	push	r10
 e22:	bf 92       	push	r11
 e24:	cf 92       	push	r12
 e26:	df 92       	push	r13
 e28:	ef 92       	push	r14
 e2a:	ff 92       	push	r15
 e2c:	0f 93       	push	r16
 e2e:	1f 93       	push	r17
 e30:	cf 93       	push	r28
 e32:	df 93       	push	r29
 e34:	cd b7       	in	r28, 0x3d	; 61
 e36:	de b7       	in	r29, 0x3e	; 62
 e38:	ca 1b       	sub	r28, r26
 e3a:	db 0b       	sbc	r29, r27
 e3c:	0f b6       	in	r0, 0x3f	; 63
 e3e:	f8 94       	cli
 e40:	de bf       	out	0x3e, r29	; 62
 e42:	0f be       	out	0x3f, r0	; 63
 e44:	cd bf       	out	0x3d, r28	; 61
 e46:	09 94       	ijmp

00000e48 <__epilogue_restores__>:
 e48:	2a 88       	ldd	r2, Y+18	; 0x12
 e4a:	39 88       	ldd	r3, Y+17	; 0x11
 e4c:	48 88       	ldd	r4, Y+16	; 0x10
 e4e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e50:	6e 84       	ldd	r6, Y+14	; 0x0e
 e52:	7d 84       	ldd	r7, Y+13	; 0x0d
 e54:	8c 84       	ldd	r8, Y+12	; 0x0c
 e56:	9b 84       	ldd	r9, Y+11	; 0x0b
 e58:	aa 84       	ldd	r10, Y+10	; 0x0a
 e5a:	b9 84       	ldd	r11, Y+9	; 0x09
 e5c:	c8 84       	ldd	r12, Y+8	; 0x08
 e5e:	df 80       	ldd	r13, Y+7	; 0x07
 e60:	ee 80       	ldd	r14, Y+6	; 0x06
 e62:	fd 80       	ldd	r15, Y+5	; 0x05
 e64:	0c 81       	ldd	r16, Y+4	; 0x04
 e66:	1b 81       	ldd	r17, Y+3	; 0x03
 e68:	aa 81       	ldd	r26, Y+2	; 0x02
 e6a:	b9 81       	ldd	r27, Y+1	; 0x01
 e6c:	ce 0f       	add	r28, r30
 e6e:	d1 1d       	adc	r29, r1
 e70:	0f b6       	in	r0, 0x3f	; 63
 e72:	f8 94       	cli
 e74:	de bf       	out	0x3e, r29	; 62
 e76:	0f be       	out	0x3f, r0	; 63
 e78:	cd bf       	out	0x3d, r28	; 61
 e7a:	ed 01       	movw	r28, r26
 e7c:	08 95       	ret

00000e7e <_exit>:
 e7e:	f8 94       	cli

00000e80 <__stop_program>:
 e80:	ff cf       	rjmp	.-2      	; 0xe80 <__stop_program>
