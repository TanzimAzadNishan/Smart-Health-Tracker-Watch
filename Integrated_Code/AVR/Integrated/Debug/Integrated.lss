
Integrated.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001086  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00001086  0000111a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080017c  0080017c  00001236  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000012d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eef  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b07  00000000  00000000  0000331f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ebe  00000000  00000000  00003e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000354  00000000  00000000  00004ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a2  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f38  00000000  00000000  000056da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006612  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3b       	cpi	r26, 0xB1	; 177
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 69 03 	call	0x6d2	; 0x6d2 <main>
      8a:	0c 94 41 08 	jmp	0x1082	; 0x1082 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_WRITESEQ>:
{
    wr_lcd_mode(cmd, 0);
}
void lcd_data(unsigned char data)
{
    wr_lcd_mode(data, 1);
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	8b 01       	movw	r16, r22
      9c:	d4 2f       	mov	r29, r20
      9e:	88 0f       	add	r24, r24
      a0:	0e 94 bc 04 	call	0x978	; 0x978 <i2c_start>
      a4:	88 23       	and	r24, r24
      a6:	51 f0       	breq	.+20     	; 0xbc <I2C_WRITESEQ+0x2a>
      a8:	c1 e0       	ldi	r28, 0x01	; 1
      aa:	0c c0       	rjmp	.+24     	; 0xc4 <I2C_WRITESEQ+0x32>
      ac:	f8 01       	movw	r30, r16
      ae:	ec 0f       	add	r30, r28
      b0:	f1 1d       	adc	r31, r1
      b2:	80 81       	ld	r24, Z
      b4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <i2c_write>
      b8:	cf 5f       	subi	r28, 0xFF	; 255
      ba:	01 c0       	rjmp	.+2      	; 0xbe <I2C_WRITESEQ+0x2c>
      bc:	c0 e0       	ldi	r28, 0x00	; 0
      be:	cd 17       	cp	r28, r29
      c0:	a8 f3       	brcs	.-22     	; 0xac <I2C_WRITESEQ+0x1a>
      c2:	c0 e0       	ldi	r28, 0x00	; 0
      c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <i2c_stop>
      c8:	8c 2f       	mov	r24, r28
      ca:	df 91       	pop	r29
      cc:	cf 91       	pop	r28
      ce:	1f 91       	pop	r17
      d0:	0f 91       	pop	r16
      d2:	08 95       	ret

000000d4 <wr_lcd_mode>:
      d4:	0f 93       	push	r16
      d6:	1f 93       	push	r17
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	00 d0       	rcall	.+0      	; 0xde <wr_lcd_mode+0xa>
      de:	00 d0       	rcall	.+0      	; 0xe0 <wr_lcd_mode+0xc>
      e0:	1f 92       	push	r1
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	08 2f       	mov	r16, r24
      e8:	68 30       	cpi	r22, 0x08	; 8
      ea:	71 f4       	brne	.+28     	; 0x108 <wr_lcd_mode+0x34>
      ec:	88 23       	and	r24, r24
      ee:	11 f0       	breq	.+4      	; 0xf4 <wr_lcd_mode+0x20>
      f0:	88 e0       	ldi	r24, 0x08	; 8
      f2:	01 c0       	rjmp	.+2      	; 0xf6 <wr_lcd_mode+0x22>
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      fa:	41 e0       	ldi	r20, 0x01	; 1
      fc:	60 e6       	ldi	r22, 0x60	; 96
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	87 e2       	ldi	r24, 0x27	; 39
     102:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
     106:	26 c0       	rjmp	.+76     	; 0x154 <wr_lcd_mode+0x80>
     108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     10c:	16 2f       	mov	r17, r22
     10e:	18 2b       	or	r17, r24
     110:	19 83       	std	Y+1, r17	; 0x01
     112:	80 2f       	mov	r24, r16
     114:	80 7f       	andi	r24, 0xF0	; 240
     116:	81 2b       	or	r24, r17
     118:	84 60       	ori	r24, 0x04	; 4
     11a:	8a 83       	std	Y+2, r24	; 0x02
     11c:	8b 7f       	andi	r24, 0xFB	; 251
     11e:	8b 83       	std	Y+3, r24	; 0x03
     120:	20 e1       	ldi	r18, 0x10	; 16
     122:	02 9f       	mul	r16, r18
     124:	c0 01       	movw	r24, r0
     126:	11 24       	eor	r1, r1
     128:	81 2b       	or	r24, r17
     12a:	84 60       	ori	r24, 0x04	; 4
     12c:	8c 83       	std	Y+4, r24	; 0x04
     12e:	8b 7f       	andi	r24, 0xFB	; 251
     130:	8d 83       	std	Y+5, r24	; 0x05
     132:	45 e0       	ldi	r20, 0x05	; 5
     134:	be 01       	movw	r22, r28
     136:	6f 5f       	subi	r22, 0xFF	; 255
     138:	7f 4f       	sbci	r23, 0xFF	; 255
     13a:	87 e2       	ldi	r24, 0x27	; 39
     13c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
     140:	10 fd       	sbrc	r17, 0
     142:	08 c0       	rjmp	.+16     	; 0x154 <wr_lcd_mode+0x80>
     144:	03 30       	cpi	r16, 0x03	; 3
     146:	30 f4       	brcc	.+12     	; 0x154 <wr_lcd_mode+0x80>
     148:	e3 ef       	ldi	r30, 0xF3	; 243
     14a:	f1 e0       	ldi	r31, 0x01	; 1
     14c:	31 97       	sbiw	r30, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <wr_lcd_mode+0x78>
     150:	00 c0       	rjmp	.+0      	; 0x152 <wr_lcd_mode+0x7e>
     152:	00 00       	nop
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	df 91       	pop	r29
     160:	cf 91       	pop	r28
     162:	1f 91       	pop	r17
     164:	0f 91       	pop	r16
     166:	08 95       	ret

00000168 <lcd_gotoxy>:
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	d8 2f       	mov	r29, r24
     16e:	c6 2f       	mov	r28, r22
     170:	e6 2f       	mov	r30, r22
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	ef 59       	subi	r30, 0x9F	; 159
     176:	ff 4f       	sbci	r31, 0xFF	; 255
     178:	80 81       	ld	r24, Z
     17a:	8d 2b       	or	r24, r29
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	80 68       	ori	r24, 0x80	; 128
     180:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
     184:	d0 93 84 01 	sts	0x0184, r29	; 0x800184 <_lcd_x>
     188:	c0 93 85 01 	sts	0x0185, r28	; 0x800185 <_lcd_y>
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	08 95       	ret

00000192 <lcd_clrscr>:
     192:	60 e0       	ldi	r22, 0x00	; 0
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
     19a:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <_lcd_y>
     19e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <_lcd_x>
     1a2:	08 95       	ret

000001a4 <lcd_putc>:
     1a4:	cf 93       	push	r28
     1a6:	c8 2f       	mov	r28, r24
     1a8:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <_lcd_x>
     1ac:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <_lcd_maxx>
     1b0:	98 17       	cp	r25, r24
     1b2:	10 f4       	brcc	.+4      	; 0x1b8 <lcd_putc+0x14>
     1b4:	ca 30       	cpi	r28, 0x0A	; 10
     1b6:	41 f4       	brne	.+16     	; 0x1c8 <lcd_putc+0x24>
     1b8:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <_lcd_y>
     1bc:	6f 5f       	subi	r22, 0xFF	; 255
     1be:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <_lcd_y>
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
     1c8:	ca 30       	cpi	r28, 0x0A	; 10
     1ca:	49 f0       	breq	.+18     	; 0x1de <lcd_putc+0x3a>
     1cc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <_lcd_x>
     1d0:	8f 5f       	subi	r24, 0xFF	; 255
     1d2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <_lcd_x>
     1d6:	61 e0       	ldi	r22, 0x01	; 1
     1d8:	8c 2f       	mov	r24, r28
     1da:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
     1de:	cf 91       	pop	r28
     1e0:	08 95       	ret

000001e2 <lcd_puts>:
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
     1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <lcd_puts+0xe>
     1ea:	21 96       	adiw	r28, 0x01	; 1
     1ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
     1f0:	88 81       	ld	r24, Y
     1f2:	81 11       	cpse	r24, r1
     1f4:	fa cf       	rjmp	.-12     	; 0x1ea <lcd_puts+0x8>
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <lcd_init>:
}
// initialize the LCD controller
void lcd_init(unsigned char command)
{
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <lcd_init+0xa>
     206:	00 d0       	rcall	.+0      	; 0x208 <lcd_init+0xc>
     208:	00 d0       	rcall	.+0      	; 0x20a <lcd_init+0xe>
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	08 2f       	mov	r16, r24
    uint8_t nibbleval30[] = {0x30, 0x34, 0x30};
     210:	80 e3       	ldi	r24, 0x30	; 48
     212:	89 83       	std	Y+1, r24	; 0x01
     214:	94 e3       	ldi	r25, 0x34	; 52
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t nibbleval20[] = {0x20, 0x24, 0x20};
     21a:	80 e2       	ldi	r24, 0x20	; 32
     21c:	8c 83       	std	Y+4, r24	; 0x04
     21e:	94 e2       	ldi	r25, 0x24	; 36
     220:	9d 83       	std	Y+5, r25	; 0x05
     222:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t ret = 0;
    _lcd_maxx = LCD_DISP_LENGTH;
     224:	80 e1       	ldi	r24, 0x10	; 16
     226:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <_lcd_maxx>
    _base_y[2] = _base_y[0] + _lcd_maxx;
     22a:	e1 e6       	ldi	r30, 0x61	; 97
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	80 5f       	subi	r24, 0xF0	; 240
     232:	82 83       	std	Z+2, r24	; 0x02
    _base_y[3] = _base_y[1] + _lcd_maxx;
     234:	81 81       	ldd	r24, Z+1	; 0x01
     236:	80 5f       	subi	r24, 0xF0	; 240
     238:	83 83       	std	Z+3, r24	; 0x03
    DDRB |= (1<<5); PORTB |= (1<<5);
     23a:	87 b3       	in	r24, 0x17	; 23
     23c:	80 62       	ori	r24, 0x20	; 32
     23e:	87 bb       	out	0x17, r24	; 23
     240:	88 b3       	in	r24, 0x18	; 24
     242:	80 62       	ori	r24, 0x20	; 32
     244:	88 bb       	out	0x18, r24	; 24
    I2C_INIT();
     246:	0e 94 b8 04 	call	0x970	; 0x970 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24a:	8b e4       	ldi	r24, 0x4B	; 75
     24c:	9d e1       	ldi	r25, 0x1D	; 29
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0x52>
     252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_init+0x58>
     254:	00 00       	nop
    _delay_ms(30);               // 30 ms Delay nach power-up
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit  
     256:	43 e0       	ldi	r20, 0x03	; 3
     258:	be 01       	movw	r22, r28
     25a:	6f 5f       	subi	r22, 0xFF	; 255
     25c:	7f 4f       	sbci	r23, 0xFF	; 255
     25e:	87 e2       	ldi	r24, 0x27	; 39
     260:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
     264:	18 2f       	mov	r17, r24
     266:	81 ee       	ldi	r24, 0xE1	; 225
     268:	94 e0       	ldi	r25, 0x04	; 4
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init+0x6e>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init+0x74>
     270:	00 00       	nop
    _delay_ms(5);
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     272:	43 e0       	ldi	r20, 0x03	; 3
     274:	be 01       	movw	r22, r28
     276:	6f 5f       	subi	r22, 0xFF	; 255
     278:	7f 4f       	sbci	r23, 0xFF	; 255
     27a:	87 e2       	ldi	r24, 0x27	; 39
     27c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
     280:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval30, 3);    //0x3- 8-bit
     282:	43 e0       	ldi	r20, 0x03	; 3
     284:	be 01       	movw	r22, r28
     286:	6f 5f       	subi	r22, 0xFF	; 255
     288:	7f 4f       	sbci	r23, 0xFF	; 255
     28a:	87 e2       	ldi	r24, 0x27	; 39
     28c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
     290:	18 2b       	or	r17, r24
    ret |= I2C_WRITESEQ(PCF8574A, nibbleval20, 3);    //0x2- 8-bit
     292:	43 e0       	ldi	r20, 0x03	; 3
     294:	be 01       	movw	r22, r28
     296:	6c 5f       	subi	r22, 0xFC	; 252
     298:	7f 4f       	sbci	r23, 0xFF	; 255
     29a:	87 e2       	ldi	r24, 0x27	; 39
     29c:	0e 94 49 00 	call	0x92	; 0x92 <I2C_WRITESEQ>
     2a0:	18 2b       	or	r17, r24
	ret |= wr_lcd_mode(0x28, 0);                      //0x28 set 4-bit 2 lines
     2a2:	60 e0       	ldi	r22, 0x00	; 0
     2a4:	88 e2       	ldi	r24, 0x28	; 40
     2a6:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
     2aa:	81 2b       	or	r24, r17
    if (ret) { PORTB &= ~(1<<5); }
     2ac:	19 f0       	breq	.+6      	; 0x2b4 <lcd_init+0xb8>
     2ae:	88 b3       	in	r24, 0x18	; 24
     2b0:	8f 7d       	andi	r24, 0xDF	; 223
     2b2:	88 bb       	out	0x18, r24	; 24
    wr_lcd_mode(0x0c, 0);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	8c e0       	ldi	r24, 0x0C	; 12
     2b8:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(0x06, 0);
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	86 e0       	ldi	r24, 0x06	; 6
     2c0:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(0x01, 0);
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
    wr_lcd_mode(command, 0);
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	80 2f       	mov	r24, r16
     2d0:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
}
     2d4:	26 96       	adiw	r28, 0x06	; 6
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	08 95       	ret

000002ea <lcd_backlight>:

void lcd_backlight(char on)
{
    wr_lcd_mode(on, 8);
     2ea:	68 e0       	ldi	r22, 0x08	; 8
     2ec:	0e 94 6a 00 	call	0xd4	; 0xd4 <wr_lcd_mode>
     2f0:	08 95       	ret

000002f2 <ADC_Init>:
bool isPulseDetected = false;
bool isReadyForSms = false;


void ADC_Init(){
	DDRA=0x0;
     2f2:	1a ba       	out	0x1a, r1	; 26
	ADMUX = 0b01100000;
     2f4:	80 e6       	ldi	r24, 0x60	; 96
     2f6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000101;
     2f8:	85 e8       	ldi	r24, 0x85	; 133
     2fa:	86 b9       	out	0x06, r24	; 6
     2fc:	08 95       	ret

000002fe <ADC_Read>:
	uint16_t lower;
	uint16_t upper;
	uint16_t result;
	float voltage;
	
	ADCSRA |= (1 << ADSC);
     2fe:	86 b1       	in	r24, 0x06	; 6
     300:	80 64       	ori	r24, 0x40	; 64
     302:	86 b9       	out	0x06, r24	; 6
	while(ADCSRA & (1 << ADSC)){;}
     304:	36 99       	sbic	0x06, 6	; 6
     306:	fe cf       	rjmp	.-4      	; 0x304 <ADC_Read+0x6>

	lower = (ADCL>>6);
     308:	24 b1       	in	r18, 0x04	; 4
     30a:	22 95       	swap	r18
     30c:	26 95       	lsr	r18
     30e:	26 95       	lsr	r18
     310:	23 70       	andi	r18, 0x03	; 3
	upper = (ADCH<<2);
     312:	85 b1       	in	r24, 0x05	; 5
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
	result = upper | lower;
	voltage = result * 5.0 / 1024;
	
	return result;
}
     31e:	82 2b       	or	r24, r18
     320:	08 95       	ret

00000322 <uart_init>:


void uart_init(void){
	int UBBRValue = 12;
	UBRRH = (unsigned char) (UBBRValue >> 8);
     322:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) UBBRValue;
     324:	8c e0       	ldi	r24, 0x0C	; 12
     326:	89 b9       	out	0x09, r24	; 9
	UCSRA = 0x02;
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	8b b9       	out	0x0b, r24	; 11
	UCSRB = (1 << RXEN) | (1 << TXEN);    //Enable the receiver and transmitter
     32c:	88 e1       	ldi	r24, 0x18	; 24
     32e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110;	
     330:	86 e8       	ldi	r24, 0x86	; 134
     332:	80 bd       	out	0x20, r24	; 32
     334:	08 95       	ret

00000336 <uart_send>:
}

void uart_send(char data){
	while((UCSRA & (1<<UDRE)) == 0);
     336:	5d 9b       	sbis	0x0b, 5	; 11
     338:	fe cf       	rjmp	.-4      	; 0x336 <uart_send>
	UDR = data;
     33a:	8c b9       	out	0x0c, r24	; 12
     33c:	08 95       	ret

0000033e <sendToArduino>:
}

void sendToArduino(){
     33e:	cf 92       	push	r12
     340:	df 92       	push	r13
     342:	ef 92       	push	r14
     344:	ff 92       	push	r15
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	c8 5c       	subi	r28, 0xC8	; 200
     354:	d1 09       	sbc	r29, r1
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
	char sms[200] = "Temperature: ";
     360:	8e e0       	ldi	r24, 0x0E	; 14
     362:	e7 e6       	ldi	r30, 0x67	; 103
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	8e 01       	movw	r16, r28
     368:	0f 5f       	subi	r16, 0xFF	; 255
     36a:	1f 4f       	sbci	r17, 0xFF	; 255
     36c:	d8 01       	movw	r26, r16
     36e:	01 90       	ld	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	8a 95       	dec	r24
     374:	e1 f7       	brne	.-8      	; 0x36e <sendToArduino+0x30>
     376:	fe 01       	movw	r30, r28
     378:	3f 96       	adiw	r30, 0x0f	; 15
     37a:	8a eb       	ldi	r24, 0xBA	; 186
     37c:	df 01       	movw	r26, r30
     37e:	1d 92       	st	X+, r1
     380:	8a 95       	dec	r24
     382:	e9 f7       	brne	.-6      	; 0x37e <sendToArduino+0x40>
	strcat(sms, dht11_temp_main);
     384:	66 e8       	ldi	r22, 0x86	; 134
     386:	71 e0       	ldi	r23, 0x01	; 1
     388:	c8 01       	movw	r24, r16
     38a:	0e 94 17 05 	call	0xa2e	; 0xa2e <strcat>
	strcat(sms, ".");
     38e:	f8 01       	movw	r30, r16
     390:	01 90       	ld	r0, Z+
     392:	00 20       	and	r0, r0
     394:	e9 f7       	brne	.-6      	; 0x390 <sendToArduino+0x52>
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	0f 2e       	mov	r0, r31
     39a:	fe e2       	ldi	r31, 0x2E	; 46
     39c:	cf 2e       	mov	r12, r31
     39e:	d1 2c       	mov	r13, r1
     3a0:	f0 2d       	mov	r31, r0
     3a2:	d1 82       	std	Z+1, r13	; 0x01
     3a4:	c0 82       	st	Z, r12
	strcat(sms, dht11_temp_fraction);
     3a6:	6c ea       	ldi	r22, 0xAC	; 172
     3a8:	71 e0       	ldi	r23, 0x01	; 1
     3aa:	c8 01       	movw	r24, r16
     3ac:	0e 94 17 05 	call	0xa2e	; 0xa2e <strcat>
	strcat(sms, "C\n");
     3b0:	f8 01       	movw	r30, r16
     3b2:	01 90       	ld	r0, Z+
     3b4:	00 20       	and	r0, r0
     3b6:	e9 f7       	brne	.-6      	; 0x3b2 <sendToArduino+0x74>
     3b8:	31 97       	sbiw	r30, 0x01	; 1
     3ba:	0f 2e       	mov	r0, r31
     3bc:	f3 e4       	ldi	r31, 0x43	; 67
     3be:	ef 2e       	mov	r14, r31
     3c0:	fa e0       	ldi	r31, 0x0A	; 10
     3c2:	ff 2e       	mov	r15, r31
     3c4:	f0 2d       	mov	r31, r0
     3c6:	f1 82       	std	Z+1, r15	; 0x01
     3c8:	e0 82       	st	Z, r14
     3ca:	12 82       	std	Z+2, r1	; 0x02
	strcat(sms, "Humidity: ");
     3cc:	d8 01       	movw	r26, r16
     3ce:	0d 90       	ld	r0, X+
     3d0:	00 20       	and	r0, r0
     3d2:	e9 f7       	brne	.-6      	; 0x3ce <sendToArduino+0x90>
     3d4:	11 97       	sbiw	r26, 0x01	; 1
     3d6:	8b e0       	ldi	r24, 0x0B	; 11
     3d8:	ef e2       	ldi	r30, 0x2F	; 47
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	01 90       	ld	r0, Z+
     3de:	0d 92       	st	X+, r0
     3e0:	8a 95       	dec	r24
     3e2:	e1 f7       	brne	.-8      	; 0x3dc <sendToArduino+0x9e>
	strcat(sms, dht11_hum_main);
     3e4:	6b e8       	ldi	r22, 0x8B	; 139
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	c8 01       	movw	r24, r16
     3ea:	0e 94 17 05 	call	0xa2e	; 0xa2e <strcat>
	strcat(sms, ".");
     3ee:	f8 01       	movw	r30, r16
     3f0:	01 90       	ld	r0, Z+
     3f2:	00 20       	and	r0, r0
     3f4:	e9 f7       	brne	.-6      	; 0x3f0 <sendToArduino+0xb2>
     3f6:	31 97       	sbiw	r30, 0x01	; 1
     3f8:	d1 82       	std	Z+1, r13	; 0x01
     3fa:	c0 82       	st	Z, r12
	strcat(sms, dht11_hum_fraction);
     3fc:	6e e9       	ldi	r22, 0x9E	; 158
     3fe:	71 e0       	ldi	r23, 0x01	; 1
     400:	c8 01       	movw	r24, r16
     402:	0e 94 17 05 	call	0xa2e	; 0xa2e <strcat>
	strcat(sms, "%\n");
     406:	f8 01       	movw	r30, r16
     408:	01 90       	ld	r0, Z+
     40a:	00 20       	and	r0, r0
     40c:	e9 f7       	brne	.-6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     40e:	31 97       	sbiw	r30, 0x01	; 1
     410:	85 e2       	ldi	r24, 0x25	; 37
     412:	9a e0       	ldi	r25, 0x0A	; 10
     414:	91 83       	std	Z+1, r25	; 0x01
     416:	80 83       	st	Z, r24
     418:	12 82       	std	Z+2, r1	; 0x02
	strcat(sms, "Body Temperature: ");
     41a:	d8 01       	movw	r26, r16
     41c:	0d 90       	ld	r0, X+
     41e:	00 20       	and	r0, r0
     420:	e9 f7       	brne	.-6      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     422:	11 97       	sbiw	r26, 0x01	; 1
     424:	83 e1       	ldi	r24, 0x13	; 19
     426:	ea e3       	ldi	r30, 0x3A	; 58
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	01 90       	ld	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	8a 95       	dec	r24
     430:	e1 f7       	brne	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	strcat(sms, ds18b20_temp);
     432:	60 e9       	ldi	r22, 0x90	; 144
     434:	71 e0       	ldi	r23, 0x01	; 1
     436:	c8 01       	movw	r24, r16
     438:	0e 94 17 05 	call	0xa2e	; 0xa2e <strcat>
	strcat(sms, "C\n");
     43c:	f8 01       	movw	r30, r16
     43e:	01 90       	ld	r0, Z+
     440:	00 20       	and	r0, r0
     442:	e9 f7       	brne	.-6      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	f1 82       	std	Z+1, r15	; 0x01
     448:	e0 82       	st	Z, r14
     44a:	12 82       	std	Z+2, r1	; 0x02
	strcat(sms, "Pulse Rate: ");
     44c:	d8 01       	movw	r26, r16
     44e:	0d 90       	ld	r0, X+
     450:	00 20       	and	r0, r0
     452:	e9 f7       	brne	.-6      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     454:	11 97       	sbiw	r26, 0x01	; 1
     456:	8d e0       	ldi	r24, 0x0D	; 13
     458:	ed e4       	ldi	r30, 0x4D	; 77
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	01 90       	ld	r0, Z+
     45e:	0d 92       	st	X+, r0
     460:	8a 95       	dec	r24
     462:	e1 f7       	brne	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	strcat(sms, pulse_bpm);
     464:	63 ea       	ldi	r22, 0xA3	; 163
     466:	71 e0       	ldi	r23, 0x01	; 1
     468:	c8 01       	movw	r24, r16
     46a:	0e 94 17 05 	call	0xa2e	; 0xa2e <strcat>
	strcat(sms, " bpm\n");
     46e:	d8 01       	movw	r26, r16
     470:	0d 90       	ld	r0, X+
     472:	00 20       	and	r0, r0
     474:	e9 f7       	brne	.-6      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     476:	11 97       	sbiw	r26, 0x01	; 1
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	ea e5       	ldi	r30, 0x5A	; 90
     47c:	f1 e0       	ldi	r31, 0x01	; 1
     47e:	01 90       	ld	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	8a 95       	dec	r24
     484:	e1 f7       	brne	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	
	int i = 0;
     486:	00 e0       	ldi	r16, 0x00	; 0
     488:	10 e0       	ldi	r17, 0x00	; 0
	while (sms[i] != 0x00)
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
	{
		uart_send(sms[i]);
     48c:	0e 94 9b 01 	call	0x336	; 0x336 <uart_send>
		//_delay_ms(500);
		i++;
     490:	0f 5f       	subi	r16, 0xFF	; 255
     492:	1f 4f       	sbci	r17, 0xFF	; 255
	strcat(sms, "Pulse Rate: ");
	strcat(sms, pulse_bpm);
	strcat(sms, " bpm\n");
	
	int i = 0;
	while (sms[i] != 0x00)
     494:	e1 e0       	ldi	r30, 0x01	; 1
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	ec 0f       	add	r30, r28
     49a:	fd 1f       	adc	r31, r29
     49c:	e0 0f       	add	r30, r16
     49e:	f1 1f       	adc	r31, r17
     4a0:	80 81       	ld	r24, Z
     4a2:	81 11       	cpse	r24, r1
     4a4:	f3 cf       	rjmp	.-26     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     4a6:	bf e3       	ldi	r27, 0x3F	; 63
     4a8:	2d e0       	ldi	r18, 0x0D	; 13
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	b1 50       	subi	r27, 0x01	; 1
     4ae:	20 40       	sbci	r18, 0x00	; 0
     4b0:	80 40       	sbci	r24, 0x00	; 0
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b6:	00 00       	nop
		//_delay_ms(500);
		i++;
	}
	
	_delay_ms(1000);			
}
     4b8:	c8 53       	subi	r28, 0x38	; 56
     4ba:	df 4f       	sbci	r29, 0xFF	; 255
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	df 90       	pop	r13
     4d4:	cf 90       	pop	r12
     4d6:	08 95       	ret

000004d8 <therm_reset>:


uint8_t therm_reset(){
	uint8_t i;
	//Pull line low and wait for 480uS
	THERM_LOW();
     4d8:	85 b3       	in	r24, 0x15	; 21
     4da:	8f 77       	andi	r24, 0x7F	; 127
     4dc:	85 bb       	out	0x15, r24	; 21
	THERM_OUTPUT_MODE();
     4de:	84 b3       	in	r24, 0x14	; 20
     4e0:	80 68       	ori	r24, 0x80	; 128
     4e2:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e4:	80 ea       	ldi	r24, 0xA0	; 160
     4e6:	8a 95       	dec	r24
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <therm_reset+0xe>
	_delay_us(480);
	//Release line and wait for 60uS
	THERM_INPUT_MODE();
     4ea:	84 b3       	in	r24, 0x14	; 20
     4ec:	8f 77       	andi	r24, 0x7F	; 127
     4ee:	84 bb       	out	0x14, r24	; 20
     4f0:	94 e1       	ldi	r25, 0x14	; 20
     4f2:	9a 95       	dec	r25
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <therm_reset+0x1a>
	_delay_us(60);
	//Store line value and wait until the completion of 480uS period
	i=(THERM_PIN & (1<<THERM_DQ));
     4f6:	83 b3       	in	r24, 0x13	; 19
     4f8:	80 78       	andi	r24, 0x80	; 128
     4fa:	9c e8       	ldi	r25, 0x8C	; 140
     4fc:	9a 95       	dec	r25
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <therm_reset+0x24>
	_delay_us(420);
	//Return the value read from the presence pulse (0=OK, 1=WRONG)
	return i;

}
     500:	08 95       	ret

00000502 <therm_write_bit>:



void therm_write_bit(uint8_t bit){
	//Pull line low for 1uS
	THERM_LOW();
     502:	95 b3       	in	r25, 0x15	; 21
     504:	9f 77       	andi	r25, 0x7F	; 127
     506:	95 bb       	out	0x15, r25	; 21
	THERM_OUTPUT_MODE();
     508:	94 b3       	in	r25, 0x14	; 20
     50a:	90 68       	ori	r25, 0x80	; 128
     50c:	94 bb       	out	0x14, r25	; 20
     50e:	00 00       	nop
	_delay_us(1);
	//If we want to write 1, release the line (if not will keep low)
	if(bit) THERM_INPUT_MODE();
     510:	88 23       	and	r24, r24
     512:	19 f0       	breq	.+6      	; 0x51a <therm_write_bit+0x18>
     514:	84 b3       	in	r24, 0x14	; 20
     516:	8f 77       	andi	r24, 0x7F	; 127
     518:	84 bb       	out	0x14, r24	; 20
     51a:	84 e1       	ldi	r24, 0x14	; 20
     51c:	8a 95       	dec	r24
     51e:	f1 f7       	brne	.-4      	; 0x51c <therm_write_bit+0x1a>
	//Wait for 60uS and release the line
	_delay_us(60);
	THERM_INPUT_MODE();
     520:	84 b3       	in	r24, 0x14	; 20
     522:	8f 77       	andi	r24, 0x7F	; 127
     524:	84 bb       	out	0x14, r24	; 20
     526:	08 95       	ret

00000528 <therm_read_bit>:


uint8_t therm_read_bit(void){
	uint8_t bit=0;
	//Pull line low for 1uS
	THERM_LOW();
     528:	85 b3       	in	r24, 0x15	; 21
     52a:	8f 77       	andi	r24, 0x7F	; 127
     52c:	85 bb       	out	0x15, r24	; 21
	THERM_OUTPUT_MODE();
     52e:	84 b3       	in	r24, 0x14	; 20
     530:	80 68       	ori	r24, 0x80	; 128
     532:	84 bb       	out	0x14, r24	; 20
     534:	00 00       	nop
	_delay_us(1);
	//Release line and wait for 14uS
	THERM_INPUT_MODE();
     536:	84 b3       	in	r24, 0x14	; 20
     538:	8f 77       	andi	r24, 0x7F	; 127
     53a:	84 bb       	out	0x14, r24	; 20
     53c:	84 e0       	ldi	r24, 0x04	; 4
     53e:	8a 95       	dec	r24
     540:	f1 f7       	brne	.-4      	; 0x53e <therm_read_bit+0x16>
     542:	00 c0       	rjmp	.+0      	; 0x544 <therm_read_bit+0x1c>
	_delay_us(14);
	//Read line value
	if(THERM_PIN&(1<<THERM_DQ)) bit=1;
     544:	9f 99       	sbic	0x13, 7	; 19
     546:	02 c0       	rjmp	.+4      	; 0x54c <therm_read_bit+0x24>
	THERM_INPUT_MODE();
}


uint8_t therm_read_bit(void){
	uint8_t bit=0;
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	01 c0       	rjmp	.+2      	; 0x54e <therm_read_bit+0x26>
	_delay_us(1);
	//Release line and wait for 14uS
	THERM_INPUT_MODE();
	_delay_us(14);
	//Read line value
	if(THERM_PIN&(1<<THERM_DQ)) bit=1;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	9f e0       	ldi	r25, 0x0F	; 15
     550:	9a 95       	dec	r25
     552:	f1 f7       	brne	.-4      	; 0x550 <therm_read_bit+0x28>
	//Wait for 45uS to end and return read value
	_delay_us(45);
	return bit;
}
     554:	08 95       	ret

00000556 <therm_read_byte>:



uint8_t therm_read_byte(void){
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
	uint8_t i=8, n=0;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	98 e0       	ldi	r25, 0x08	; 8
	while(i--){
     55e:	0a c0       	rjmp	.+20     	; 0x574 <therm_read_byte+0x1e>
		//Shift one position right and store read value
		n>>=1;
     560:	c8 2f       	mov	r28, r24
     562:	c6 95       	lsr	r28
		n|=(therm_read_bit()<<7);
     564:	0e 94 94 02 	call	0x528	; 0x528 <therm_read_bit>
     568:	20 e8       	ldi	r18, 0x80	; 128
     56a:	82 9f       	mul	r24, r18
     56c:	c0 01       	movw	r24, r0
     56e:	11 24       	eor	r1, r1
     570:	8c 2b       	or	r24, r28



uint8_t therm_read_byte(void){
	uint8_t i=8, n=0;
	while(i--){
     572:	9d 2f       	mov	r25, r29
     574:	df ef       	ldi	r29, 0xFF	; 255
     576:	d9 0f       	add	r29, r25
     578:	91 11       	cpse	r25, r1
     57a:	f2 cf       	rjmp	.-28     	; 0x560 <therm_read_byte+0xa>
		n>>=1;
		n|=(therm_read_bit()<<7);
	}
	return n;

}
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <therm_write_byte>:


void therm_write_byte(uint8_t byte){
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	c8 2f       	mov	r28, r24
	uint8_t i=8;
     588:	88 e0       	ldi	r24, 0x08	; 8
	while(i--){
     58a:	06 c0       	rjmp	.+12     	; 0x598 <therm_write_byte+0x16>
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
     58c:	8c 2f       	mov	r24, r28
     58e:	81 70       	andi	r24, 0x01	; 1
     590:	0e 94 81 02 	call	0x502	; 0x502 <therm_write_bit>
		byte>>=1;
     594:	c6 95       	lsr	r28
}


void therm_write_byte(uint8_t byte){
	uint8_t i=8;
	while(i--){
     596:	8d 2f       	mov	r24, r29
     598:	df ef       	ldi	r29, 0xFF	; 255
     59a:	d8 0f       	add	r29, r24
     59c:	81 11       	cpse	r24, r1
     59e:	f6 cf       	rjmp	.-20     	; 0x58c <therm_write_byte+0xa>
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
		byte>>=1;
	}
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <therm_read_temperature>:

#define THERM_DECIMAL_STEPS_12BIT 0.0625
void therm_read_temperature(){
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
	int8_t digit;
	uint16_t decimal;
	
	
	//Reset, skip ROM and start temperature conversion
	therm_reset();
     5aa:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);
     5ae:	8c ec       	ldi	r24, 0xCC	; 204
     5b0:	0e 94 c1 02 	call	0x582	; 0x582 <therm_write_byte>
	therm_write_byte(THERM_CMD_CONVERTTEMP);
     5b4:	84 e4       	ldi	r24, 0x44	; 68
     5b6:	0e 94 c1 02 	call	0x582	; 0x582 <therm_write_byte>
	//Wait until conversion is complete
	while(!therm_read_bit());
     5ba:	0e 94 94 02 	call	0x528	; 0x528 <therm_read_bit>
     5be:	88 23       	and	r24, r24
     5c0:	e1 f3       	breq	.-8      	; 0x5ba <therm_read_temperature+0x14>
	//Reset, skip ROM and send command to read
	therm_reset();
     5c2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);
     5c6:	8c ec       	ldi	r24, 0xCC	; 204
     5c8:	0e 94 c1 02 	call	0x582	; 0x582 <therm_write_byte>
	therm_write_byte(THERM_CMD_RSCRATCHPAD);
     5cc:	8e eb       	ldi	r24, 0xBE	; 190
     5ce:	0e 94 c1 02 	call	0x582	; 0x582 <therm_write_byte>
	
	//Read (only 2 first bytes)
	temperature[0]=therm_read_byte();
     5d2:	0e 94 ab 02 	call	0x556	; 0x556 <therm_read_byte>
     5d6:	d8 2f       	mov	r29, r24
	temperature[1]=therm_read_byte();
     5d8:	0e 94 ab 02 	call	0x556	; 0x556 <therm_read_byte>
     5dc:	c8 2f       	mov	r28, r24
	therm_reset();
     5de:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <therm_reset>
	
	digit=temperature[0]>>4;
     5e2:	2d 2f       	mov	r18, r29
     5e4:	22 95       	swap	r18
     5e6:	2f 70       	andi	r18, 0x0F	; 15
	digit|=(temperature[1]&0x7)<<4;
     5e8:	c7 70       	andi	r28, 0x07	; 7
     5ea:	30 e1       	ldi	r19, 0x10	; 16
     5ec:	c3 9f       	mul	r28, r19
     5ee:	c0 01       	movw	r24, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	28 2b       	or	r18, r24

	decimal=temperature[0]&0xff;
	sprintf(ds18b20_temp, "%d.%d", digit, (int)decimal/10);
     5f4:	8d 2f       	mov	r24, r29
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	6a e0       	ldi	r22, 0x0A	; 10
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	0e 94 ef 04 	call	0x9de	; 0x9de <__divmodhi4>
     600:	7f 93       	push	r23
     602:	6f 93       	push	r22
     604:	82 2f       	mov	r24, r18
     606:	02 2e       	mov	r0, r18
     608:	00 0c       	add	r0, r0
     60a:	99 0b       	sbc	r25, r25
     60c:	9f 93       	push	r25
     60e:	2f 93       	push	r18
     610:	80 e6       	ldi	r24, 0x60	; 96
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	80 e9       	ldi	r24, 0x90	; 144
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	0e 94 47 05 	call	0xa8e	; 0xa8e <sprintf>
	
	lcd_gotoxy(3,1);
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts(ds18b20_temp);
     62c:	80 e9       	ldi	r24, 0x90	; 144
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	lcd_gotoxy(8,1);
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	88 e0       	ldi	r24, 0x08	; 8
     638:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts(" ");
     63c:	8b e4       	ldi	r24, 0x4B	; 75
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
}
     644:	8d b7       	in	r24, 0x3d	; 61
     646:	9e b7       	in	r25, 0x3e	; 62
     648:	08 96       	adiw	r24, 0x08	; 8
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	9e bf       	out	0x3e, r25	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	8d bf       	out	0x3d, r24	; 61
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <Request>:



void Request()
{
	DDRD |= (1<<DHT11_PIN);
     65a:	81 b3       	in	r24, 0x11	; 17
     65c:	80 64       	ori	r24, 0x40	; 64
     65e:	81 bb       	out	0x11, r24	; 17
	PORTD &= ~(1<<DHT11_PIN);
     660:	82 b3       	in	r24, 0x12	; 18
     662:	8f 7b       	andi	r24, 0xBF	; 191
     664:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     666:	87 e8       	ldi	r24, 0x87	; 135
     668:	93 e1       	ldi	r25, 0x13	; 19
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <Request+0x10>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <Request+0x16>
     670:	00 00       	nop
	_delay_ms(20);
	PORTD |= (1<<DHT11_PIN);
     672:	82 b3       	in	r24, 0x12	; 18
     674:	80 64       	ori	r24, 0x40	; 64
     676:	82 bb       	out	0x12, r24	; 18
     678:	08 95       	ret

0000067a <Response>:
}

void Response()
{
	DDRD &= ~(1<<DHT11_PIN);
     67a:	81 b3       	in	r24, 0x11	; 17
     67c:	8f 7b       	andi	r24, 0xBF	; 191
     67e:	81 bb       	out	0x11, r24	; 17
	while(PIND & (1<<DHT11_PIN));
     680:	86 99       	sbic	0x10, 6	; 16
     682:	fe cf       	rjmp	.-4      	; 0x680 <Response+0x6>
	while((PIND & (1<<DHT11_PIN))==0);
     684:	86 9b       	sbis	0x10, 6	; 16
     686:	fe cf       	rjmp	.-4      	; 0x684 <Response+0xa>
	while(PIND & (1<<DHT11_PIN));
     688:	86 99       	sbic	0x10, 6	; 16
     68a:	fe cf       	rjmp	.-4      	; 0x688 <Response+0xe>
}
     68c:	08 95       	ret

0000068e <Receive_data>:


uint8_t Receive_data()
{
	for (int q=0; q<8; q++)
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	19 c0       	rjmp	.+50     	; 0x6c6 <Receive_data+0x38>
	{
		while((PIND & (1<<DHT11_PIN)) == 0);
     694:	86 9b       	sbis	0x10, 6	; 16
     696:	fe cf       	rjmp	.-4      	; 0x694 <Receive_data+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     698:	8a e0       	ldi	r24, 0x0A	; 10
     69a:	8a 95       	dec	r24
     69c:	f1 f7       	brne	.-4      	; 0x69a <Receive_data+0xc>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))
     69e:	86 9b       	sbis	0x10, 6	; 16
     6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <Receive_data+0x26>
		c = (c<<1)|(0x01);
     6a2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <c>
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	81 60       	ori	r24, 0x01	; 1
     6ae:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <c>
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <Receive_data+0x30>
		else
		c = (c<<1);
     6b4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <c>
     6b8:	88 0f       	add	r24, r24
     6ba:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <c>
		while(PIND & (1<<DHT11_PIN));
     6be:	86 99       	sbic	0x10, 6	; 16
     6c0:	fe cf       	rjmp	.-4      	; 0x6be <Receive_data+0x30>
}


uint8_t Receive_data()
{
	for (int q=0; q<8; q++)
     6c2:	2f 5f       	subi	r18, 0xFF	; 255
     6c4:	3f 4f       	sbci	r19, 0xFF	; 255
     6c6:	28 30       	cpi	r18, 0x08	; 8
     6c8:	31 05       	cpc	r19, r1
     6ca:	24 f3       	brlt	.-56     	; 0x694 <Receive_data+0x6>
		else
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
     6cc:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <c>
     6d0:	08 95       	ret

000006d2 <main>:


int main(void)
{
	lcd_init(LCD_ON_DISPLAY);
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
	lcd_backlight(0);
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_backlight>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6de:	8f e4       	ldi	r24, 0x4F	; 79
     6e0:	93 ec       	ldi	r25, 0xC3	; 195
     6e2:	01 97       	sbiw	r24, 0x01	; 1
     6e4:	f1 f7       	brne	.-4      	; 0x6e2 <main+0x10>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <main+0x16>
     6e8:	00 00       	nop
	_delay_ms(200);
	lcd_backlight(1);
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_backlight>
     6f0:	8f e4       	ldi	r24, 0x4F	; 79
     6f2:	93 ec       	ldi	r25, 0xC3	; 195
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <main+0x22>
     6f8:	00 c0       	rjmp	.+0      	; 0x6fa <main+0x28>
     6fa:	00 00       	nop
	_delay_ms(200);

	lcd_clrscr();
     6fc:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_clrscr>
	lcd_gotoxy(0,0);
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("H=");
     708:	86 e6       	ldi	r24, 0x66	; 102
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	lcd_gotoxy(9,1);
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	89 e0       	ldi	r24, 0x09	; 9
     714:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("T=");
     718:	8a e6       	ldi	r24, 0x6A	; 106
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	
	
	lcd_gotoxy(0,1);
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("BT=");
     728:	89 e6       	ldi	r24, 0x69	; 105
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	
	lcd_gotoxy(9, 0);
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	89 e0       	ldi	r24, 0x09	; 9
     734:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
	lcd_puts("BPM=");
     738:	8d e6       	ldi	r24, 0x6D	; 109
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	
	
	DDRD = 0xFF;  
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;  
     744:	84 bb       	out	0x14, r24	; 20
	DDRA = 0x00;
     746:	1a ba       	out	0x1a, r1	; 26
		
	ADC_Init();
     748:	0e 94 79 01 	call	0x2f2	; 0x2f2 <ADC_Init>
	uart_init();
     74c:	0e 94 91 01 	call	0x322	; 0x322 <uart_init>
		char val[5];
		itoa(noOfPulse, val, 10);
		lcd_gotoxy(7,0);
		lcd_puts(val);*/		
		
		Request();				
     750:	0e 94 2d 03 	call	0x65a	; 0x65a <Request>
		Response();				
     754:	0e 94 3d 03 	call	0x67a	; 0x67a <Response>
		I_RH=Receive_data();	
     758:	0e 94 47 03 	call	0x68e	; 0x68e <Receive_data>
     75c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <I_RH>
		D_RH=Receive_data();	
     760:	0e 94 47 03 	call	0x68e	; 0x68e <Receive_data>
     764:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <D_RH>
		I_Temp=Receive_data();	
     768:	0e 94 47 03 	call	0x68e	; 0x68e <Receive_data>
     76c:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <I_Temp>
		D_Temp=Receive_data();	
     770:	0e 94 47 03 	call	0x68e	; 0x68e <Receive_data>
     774:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <D_Temp>
		CheckSum=Receive_data();
     778:	0e 94 47 03 	call	0x68e	; 0x68e <Receive_data>
     77c:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <CheckSum>
		    
		if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
     780:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <I_RH>
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <D_RH>
     78a:	9f 01       	movw	r18, r30
     78c:	29 0f       	add	r18, r25
     78e:	31 1d       	adc	r19, r1
     790:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <I_Temp>
     794:	29 0f       	add	r18, r25
     796:	31 1d       	adc	r19, r1
     798:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <D_Temp>
     79c:	29 0f       	add	r18, r25
     79e:	31 1d       	adc	r19, r1
     7a0:	48 2f       	mov	r20, r24
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	24 17       	cp	r18, r20
     7a6:	35 07       	cpc	r19, r21
     7a8:	09 f0       	breq	.+2      	; 0x7ac <main+0xda>
     7aa:	46 c0       	rjmp	.+140    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     7ac:	4a e0       	ldi	r20, 0x0A	; 10
     7ae:	6b e8       	ldi	r22, 0x8B	; 139
     7b0:	71 e0       	ldi	r23, 0x01	; 1
     7b2:	cf 01       	movw	r24, r30
     7b4:	0e 94 22 05 	call	0xa44	; 0xa44 <__itoa_ncheck>
		}
		    
		else
		{
			itoa(I_RH,dht11_hum_main,10);
			lcd_gotoxy(2,0);
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts(dht11_hum_main);
     7c0:	8b e8       	ldi	r24, 0x8B	; 139
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts(".");
     7c8:	82 e7       	ldi	r24, 0x72	; 114
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			    
			itoa(D_RH,dht11_hum_fraction,10);
     7d0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <D_RH>
     7d4:	4a e0       	ldi	r20, 0x0A	; 10
     7d6:	6e e9       	ldi	r22, 0x9E	; 158
     7d8:	71 e0       	ldi	r23, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 22 05 	call	0xa44	; 0xa44 <__itoa_ncheck>
			lcd_puts(dht11_hum_fraction);
     7e0:	8e e9       	ldi	r24, 0x9E	; 158
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts("%");
     7e8:	84 e7       	ldi	r24, 0x74	; 116
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>

			itoa(I_Temp,dht11_temp_main,10);
     7f0:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <I_Temp>
     7f4:	4a e0       	ldi	r20, 0x0A	; 10
     7f6:	66 e8       	ldi	r22, 0x86	; 134
     7f8:	71 e0       	ldi	r23, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 22 05 	call	0xa44	; 0xa44 <__itoa_ncheck>
			lcd_gotoxy(11,1);
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	8b e0       	ldi	r24, 0x0B	; 11
     804:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts(dht11_temp_main);
     808:	86 e8       	ldi	r24, 0x86	; 134
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts(".");
     810:	82 e7       	ldi	r24, 0x72	; 114
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			    
			itoa(D_Temp,dht11_temp_fraction,10);
     818:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <D_Temp>
     81c:	4a e0       	ldi	r20, 0x0A	; 10
     81e:	6c ea       	ldi	r22, 0xAC	; 172
     820:	71 e0       	ldi	r23, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 22 05 	call	0xa44	; 0xa44 <__itoa_ncheck>
			lcd_puts(dht11_temp_fraction);
     828:	8c ea       	ldi	r24, 0xAC	; 172
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			lcd_puts("C");
     830:	86 e7       	ldi	r24, 0x76	; 118
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
     838:	83 ed       	ldi	r24, 0xD3	; 211
     83a:	90 e3       	ldi	r25, 0x30	; 48
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	f1 f7       	brne	.-4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     840:	00 c0       	rjmp	.+0      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     842:	00 00       	nop
		}
		    
		_delay_ms(50);
		
		therm_read_temperature();
     844:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <therm_read_temperature>
     848:	83 ed       	ldi	r24, 0xD3	; 211
     84a:	90 e3       	ldi	r25, 0x30	; 48
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	f1 f7       	brne	.-4      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     850:	00 c0       	rjmp	.+0      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     852:	00 00       	nop
		_delay_ms(50);		
		
		noOfPulse++;
     854:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <noOfPulse>
     858:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <noOfPulse+0x1>
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <noOfPulse+0x1>
     862:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <noOfPulse>
		if(noOfPulse % 23 == 0){
     866:	67 e1       	ldi	r22, 0x17	; 23
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	0e 94 ef 04 	call	0x9de	; 0x9de <__divmodhi4>
     86e:	89 2b       	or	r24, r25
     870:	79 f5       	brne	.+94     	; 0x8d0 <__stack+0x71>
			noOfPulse = 0;
     872:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <noOfPulse+0x1>
     876:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <noOfPulse>
			if(bpm_count > 16){
     87a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <bpm_count>
     87e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <bpm_count+0x1>
     882:	41 97       	sbiw	r24, 0x11	; 17
     884:	34 f0       	brlt	.+12     	; 0x892 <__stack+0x33>
				bpm_count = 16;
     886:	80 e1       	ldi	r24, 0x10	; 16
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <bpm_count+0x1>
     88e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <bpm_count>
			}
			itoa(bpm_count*6,pulse_bpm,10);
     892:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <bpm_count>
     896:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <bpm_count+0x1>
     89a:	9c 01       	movw	r18, r24
     89c:	22 0f       	add	r18, r18
     89e:	33 1f       	adc	r19, r19
     8a0:	82 0f       	add	r24, r18
     8a2:	93 1f       	adc	r25, r19
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	4a e0       	ldi	r20, 0x0A	; 10
     8aa:	63 ea       	ldi	r22, 0xA3	; 163
     8ac:	71 e0       	ldi	r23, 0x01	; 1
     8ae:	0e 94 22 05 	call	0xa44	; 0xa44 <__itoa_ncheck>
		
			lcd_gotoxy(13,0);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	8d e0       	ldi	r24, 0x0D	; 13
     8b6:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts(pulse_bpm);
     8ba:	83 ea       	ldi	r24, 0xA3	; 163
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			bpm_count=0;
     8c2:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <bpm_count+0x1>
     8c6:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <bpm_count>
			isPulseDetected = false;
     8ca:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <isPulseDetected>
     8ce:	23 c0       	rjmp	.+70     	; 0x916 <__stack+0xb7>
			//_delay_ms(50);			
		}
		else{
			uint16_t adc_volt = ADC_Read(0);
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <ADC_Read>
			
			if(adc_volt > thresh && !isPulseDetected){
     8d6:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <thresh>
     8da:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <thresh+0x1>
     8de:	28 17       	cp	r18, r24
     8e0:	39 07       	cpc	r19, r25
     8e2:	88 f4       	brcc	.+34     	; 0x906 <__stack+0xa7>
     8e4:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <isPulseDetected>
     8e8:	81 11       	cpse	r24, r1
     8ea:	0d c0       	rjmp	.+26     	; 0x906 <__stack+0xa7>
				bpm_count+=1;
     8ec:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <bpm_count>
     8f0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <bpm_count+0x1>
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <bpm_count+0x1>
     8fa:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <bpm_count>
				isPulseDetected = true;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <isPulseDetected>
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xab>
			}
			else{
				isPulseDetected = false;
     906:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <isPulseDetected>
     90a:	83 ed       	ldi	r24, 0xD3	; 211
     90c:	90 e3       	ldi	r25, 0x30	; 48
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <__stack+0xaf>
     912:	00 c0       	rjmp	.+0      	; 0x914 <__stack+0xb5>
     914:	00 00       	nop
			}
			_delay_ms(50);			
		}
		
		if(noOfPulse % 10 == 0){
     916:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <noOfPulse>
     91a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <noOfPulse+0x1>
     91e:	6a e0       	ldi	r22, 0x0A	; 10
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	0e 94 ef 04 	call	0x9de	; 0x9de <__divmodhi4>
     926:	89 2b       	or	r24, r25
     928:	19 f4       	brne	.+6      	; 0x930 <__stack+0xd1>
			isReadyForSms = true;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
		}
		if(isReadyForSms){
     930:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
     934:	88 23       	and	r24, r24
     936:	69 f0       	breq	.+26     	; 0x952 <__stack+0xf3>
			lcd_gotoxy(7,0);
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	87 e0       	ldi	r24, 0x07	; 7
     93c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts("Y");
     940:	88 e7       	ldi	r24, 0x78	; 120
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
			isReadyForSms = false;
     948:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
			sendToArduino();
     94c:	0e 94 9f 01 	call	0x33e	; 0x33e <sendToArduino>
     950:	08 c0       	rjmp	.+16     	; 0x962 <__stack+0x103>
		}
		else{
			lcd_gotoxy(7,0);
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	87 e0       	ldi	r24, 0x07	; 7
     956:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_gotoxy>
			lcd_puts("N");
     95a:	8a e7       	ldi	r24, 0x7A	; 122
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
     962:	83 ed       	ldi	r24, 0xD3	; 211
     964:	90 e3       	ldi	r25, 0x30	; 48
     966:	01 97       	sbiw	r24, 0x01	; 1
     968:	f1 f7       	brne	.-4      	; 0x966 <__stack+0x107>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <__stack+0x10d>
     96c:	00 00       	nop
     96e:	f0 ce       	rjmp	.-544    	; 0x750 <main+0x7e>

00000970 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     970:	11 b8       	out	0x01, r1	; 1
     972:	8c e0       	ldi	r24, 0x0C	; 12
     974:	80 b9       	out	0x00, r24	; 0
     976:	08 95       	ret

00000978 <i2c_start>:
     978:	94 ea       	ldi	r25, 0xA4	; 164
     97a:	96 bf       	out	0x36, r25	; 54
     97c:	06 b6       	in	r0, 0x36	; 54
     97e:	07 fe       	sbrs	r0, 7
     980:	fd cf       	rjmp	.-6      	; 0x97c <i2c_start+0x4>
     982:	91 b1       	in	r25, 0x01	; 1
     984:	98 7f       	andi	r25, 0xF8	; 248
     986:	98 30       	cpi	r25, 0x08	; 8
     988:	11 f0       	breq	.+4      	; 0x98e <i2c_start+0x16>
     98a:	90 31       	cpi	r25, 0x10	; 16
     98c:	71 f4       	brne	.+28     	; 0x9aa <i2c_start+0x32>
     98e:	83 b9       	out	0x03, r24	; 3
     990:	84 e8       	ldi	r24, 0x84	; 132
     992:	86 bf       	out	0x36, r24	; 54
     994:	06 b6       	in	r0, 0x36	; 54
     996:	07 fe       	sbrs	r0, 7
     998:	fd cf       	rjmp	.-6      	; 0x994 <i2c_start+0x1c>
     99a:	81 b1       	in	r24, 0x01	; 1
     99c:	88 7f       	andi	r24, 0xF8	; 248
     99e:	88 31       	cpi	r24, 0x18	; 24
     9a0:	31 f0       	breq	.+12     	; 0x9ae <i2c_start+0x36>
     9a2:	80 34       	cpi	r24, 0x40	; 64
     9a4:	31 f4       	brne	.+12     	; 0x9b2 <i2c_start+0x3a>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	08 95       	ret
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	08 95       	ret
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	08 95       	ret
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	08 95       	ret

000009b6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     9b6:	84 e9       	ldi	r24, 0x94	; 148
     9b8:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     9ba:	06 b6       	in	r0, 0x36	; 54
     9bc:	04 fc       	sbrc	r0, 4
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <i2c_stop+0x4>

}/* i2c_stop */
     9c0:	08 95       	ret

000009c2 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     9c2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
     9c4:	84 e8       	ldi	r24, 0x84	; 132
     9c6:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     9c8:	06 b6       	in	r0, 0x36	; 54
     9ca:	07 fe       	sbrs	r0, 7
     9cc:	fd cf       	rjmp	.-6      	; 0x9c8 <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     9ce:	81 b1       	in	r24, 0x01	; 1
     9d0:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     9d2:	88 32       	cpi	r24, 0x28	; 40
     9d4:	11 f0       	breq	.+4      	; 0x9da <i2c_write+0x18>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	08 95       	ret
	return 0;
     9da:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
     9dc:	08 95       	ret

000009de <__divmodhi4>:
     9de:	97 fb       	bst	r25, 7
     9e0:	07 2e       	mov	r0, r23
     9e2:	16 f4       	brtc	.+4      	; 0x9e8 <__divmodhi4+0xa>
     9e4:	00 94       	com	r0
     9e6:	07 d0       	rcall	.+14     	; 0x9f6 <__divmodhi4_neg1>
     9e8:	77 fd       	sbrc	r23, 7
     9ea:	09 d0       	rcall	.+18     	; 0x9fe <__divmodhi4_neg2>
     9ec:	0e 94 03 05 	call	0xa06	; 0xa06 <__udivmodhi4>
     9f0:	07 fc       	sbrc	r0, 7
     9f2:	05 d0       	rcall	.+10     	; 0x9fe <__divmodhi4_neg2>
     9f4:	3e f4       	brtc	.+14     	; 0xa04 <__divmodhi4_exit>

000009f6 <__divmodhi4_neg1>:
     9f6:	90 95       	com	r25
     9f8:	81 95       	neg	r24
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	08 95       	ret

000009fe <__divmodhi4_neg2>:
     9fe:	70 95       	com	r23
     a00:	61 95       	neg	r22
     a02:	7f 4f       	sbci	r23, 0xFF	; 255

00000a04 <__divmodhi4_exit>:
     a04:	08 95       	ret

00000a06 <__udivmodhi4>:
     a06:	aa 1b       	sub	r26, r26
     a08:	bb 1b       	sub	r27, r27
     a0a:	51 e1       	ldi	r21, 0x11	; 17
     a0c:	07 c0       	rjmp	.+14     	; 0xa1c <__udivmodhi4_ep>

00000a0e <__udivmodhi4_loop>:
     a0e:	aa 1f       	adc	r26, r26
     a10:	bb 1f       	adc	r27, r27
     a12:	a6 17       	cp	r26, r22
     a14:	b7 07       	cpc	r27, r23
     a16:	10 f0       	brcs	.+4      	; 0xa1c <__udivmodhi4_ep>
     a18:	a6 1b       	sub	r26, r22
     a1a:	b7 0b       	sbc	r27, r23

00000a1c <__udivmodhi4_ep>:
     a1c:	88 1f       	adc	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	5a 95       	dec	r21
     a22:	a9 f7       	brne	.-22     	; 0xa0e <__udivmodhi4_loop>
     a24:	80 95       	com	r24
     a26:	90 95       	com	r25
     a28:	bc 01       	movw	r22, r24
     a2a:	cd 01       	movw	r24, r26
     a2c:	08 95       	ret

00000a2e <strcat>:
     a2e:	fb 01       	movw	r30, r22
     a30:	dc 01       	movw	r26, r24
     a32:	0d 90       	ld	r0, X+
     a34:	00 20       	and	r0, r0
     a36:	e9 f7       	brne	.-6      	; 0xa32 <strcat+0x4>
     a38:	11 97       	sbiw	r26, 0x01	; 1
     a3a:	01 90       	ld	r0, Z+
     a3c:	0d 92       	st	X+, r0
     a3e:	00 20       	and	r0, r0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <strcat+0xc>
     a42:	08 95       	ret

00000a44 <__itoa_ncheck>:
     a44:	bb 27       	eor	r27, r27
     a46:	4a 30       	cpi	r20, 0x0A	; 10
     a48:	31 f4       	brne	.+12     	; 0xa56 <__itoa_ncheck+0x12>
     a4a:	99 23       	and	r25, r25
     a4c:	22 f4       	brpl	.+8      	; 0xa56 <__itoa_ncheck+0x12>
     a4e:	bd e2       	ldi	r27, 0x2D	; 45
     a50:	90 95       	com	r25
     a52:	81 95       	neg	r24
     a54:	9f 4f       	sbci	r25, 0xFF	; 255
     a56:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__utoa_common>

00000a5a <__utoa_ncheck>:
     a5a:	bb 27       	eor	r27, r27

00000a5c <__utoa_common>:
     a5c:	fb 01       	movw	r30, r22
     a5e:	55 27       	eor	r21, r21
     a60:	aa 27       	eor	r26, r26
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	aa 1f       	adc	r26, r26
     a68:	a4 17       	cp	r26, r20
     a6a:	10 f0       	brcs	.+4      	; 0xa70 <__utoa_common+0x14>
     a6c:	a4 1b       	sub	r26, r20
     a6e:	83 95       	inc	r24
     a70:	50 51       	subi	r21, 0x10	; 16
     a72:	b9 f7       	brne	.-18     	; 0xa62 <__utoa_common+0x6>
     a74:	a0 5d       	subi	r26, 0xD0	; 208
     a76:	aa 33       	cpi	r26, 0x3A	; 58
     a78:	08 f0       	brcs	.+2      	; 0xa7c <__utoa_common+0x20>
     a7a:	a9 5d       	subi	r26, 0xD9	; 217
     a7c:	a1 93       	st	Z+, r26
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	79 f7       	brne	.-34     	; 0xa60 <__utoa_common+0x4>
     a82:	b1 11       	cpse	r27, r1
     a84:	b1 93       	st	Z+, r27
     a86:	11 92       	st	Z+, r1
     a88:	cb 01       	movw	r24, r22
     a8a:	0c 94 60 07 	jmp	0xec0	; 0xec0 <strrev>

00000a8e <sprintf>:
     a8e:	ae e0       	ldi	r26, 0x0E	; 14
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	ed e4       	ldi	r30, 0x4D	; 77
     a94:	f5 e0       	ldi	r31, 0x05	; 5
     a96:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__prologue_saves__+0x1c>
     a9a:	0d 89       	ldd	r16, Y+21	; 0x15
     a9c:	1e 89       	ldd	r17, Y+22	; 0x16
     a9e:	86 e0       	ldi	r24, 0x06	; 6
     aa0:	8c 83       	std	Y+4, r24	; 0x04
     aa2:	1a 83       	std	Y+2, r17	; 0x02
     aa4:	09 83       	std	Y+1, r16	; 0x01
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	9f e7       	ldi	r25, 0x7F	; 127
     aaa:	9e 83       	std	Y+6, r25	; 0x06
     aac:	8d 83       	std	Y+5, r24	; 0x05
     aae:	ae 01       	movw	r20, r28
     ab0:	47 5e       	subi	r20, 0xE7	; 231
     ab2:	5f 4f       	sbci	r21, 0xFF	; 255
     ab4:	6f 89       	ldd	r22, Y+23	; 0x17
     ab6:	78 8d       	ldd	r23, Y+24	; 0x18
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	0e 94 69 05 	call	0xad2	; 0xad2 <vfprintf>
     ac0:	ef 81       	ldd	r30, Y+7	; 0x07
     ac2:	f8 85       	ldd	r31, Y+8	; 0x08
     ac4:	e0 0f       	add	r30, r16
     ac6:	f1 1f       	adc	r31, r17
     ac8:	10 82       	st	Z, r1
     aca:	2e 96       	adiw	r28, 0x0e	; 14
     acc:	e4 e0       	ldi	r30, 0x04	; 4
     ace:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__epilogue_restores__+0x1c>

00000ad2 <vfprintf>:
     ad2:	ab e0       	ldi	r26, 0x0B	; 11
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	ef e6       	ldi	r30, 0x6F	; 111
     ad8:	f5 e0       	ldi	r31, 0x05	; 5
     ada:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__prologue_saves__>
     ade:	6c 01       	movw	r12, r24
     ae0:	7b 01       	movw	r14, r22
     ae2:	8a 01       	movw	r16, r20
     ae4:	fc 01       	movw	r30, r24
     ae6:	17 82       	std	Z+7, r1	; 0x07
     ae8:	16 82       	std	Z+6, r1	; 0x06
     aea:	83 81       	ldd	r24, Z+3	; 0x03
     aec:	81 ff       	sbrs	r24, 1
     aee:	cc c1       	rjmp	.+920    	; 0xe88 <vfprintf+0x3b6>
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	3c 01       	movw	r6, r24
     af6:	f6 01       	movw	r30, r12
     af8:	93 81       	ldd	r25, Z+3	; 0x03
     afa:	f7 01       	movw	r30, r14
     afc:	93 fd       	sbrc	r25, 3
     afe:	85 91       	lpm	r24, Z+
     b00:	93 ff       	sbrs	r25, 3
     b02:	81 91       	ld	r24, Z+
     b04:	7f 01       	movw	r14, r30
     b06:	88 23       	and	r24, r24
     b08:	09 f4       	brne	.+2      	; 0xb0c <vfprintf+0x3a>
     b0a:	ba c1       	rjmp	.+884    	; 0xe80 <vfprintf+0x3ae>
     b0c:	85 32       	cpi	r24, 0x25	; 37
     b0e:	39 f4       	brne	.+14     	; 0xb1e <vfprintf+0x4c>
     b10:	93 fd       	sbrc	r25, 3
     b12:	85 91       	lpm	r24, Z+
     b14:	93 ff       	sbrs	r25, 3
     b16:	81 91       	ld	r24, Z+
     b18:	7f 01       	movw	r14, r30
     b1a:	85 32       	cpi	r24, 0x25	; 37
     b1c:	29 f4       	brne	.+10     	; 0xb28 <vfprintf+0x56>
     b1e:	b6 01       	movw	r22, r12
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     b26:	e7 cf       	rjmp	.-50     	; 0xaf6 <vfprintf+0x24>
     b28:	91 2c       	mov	r9, r1
     b2a:	21 2c       	mov	r2, r1
     b2c:	31 2c       	mov	r3, r1
     b2e:	ff e1       	ldi	r31, 0x1F	; 31
     b30:	f3 15       	cp	r31, r3
     b32:	d8 f0       	brcs	.+54     	; 0xb6a <vfprintf+0x98>
     b34:	8b 32       	cpi	r24, 0x2B	; 43
     b36:	79 f0       	breq	.+30     	; 0xb56 <vfprintf+0x84>
     b38:	38 f4       	brcc	.+14     	; 0xb48 <vfprintf+0x76>
     b3a:	80 32       	cpi	r24, 0x20	; 32
     b3c:	79 f0       	breq	.+30     	; 0xb5c <vfprintf+0x8a>
     b3e:	83 32       	cpi	r24, 0x23	; 35
     b40:	a1 f4       	brne	.+40     	; 0xb6a <vfprintf+0x98>
     b42:	23 2d       	mov	r18, r3
     b44:	20 61       	ori	r18, 0x10	; 16
     b46:	1d c0       	rjmp	.+58     	; 0xb82 <vfprintf+0xb0>
     b48:	8d 32       	cpi	r24, 0x2D	; 45
     b4a:	61 f0       	breq	.+24     	; 0xb64 <vfprintf+0x92>
     b4c:	80 33       	cpi	r24, 0x30	; 48
     b4e:	69 f4       	brne	.+26     	; 0xb6a <vfprintf+0x98>
     b50:	23 2d       	mov	r18, r3
     b52:	21 60       	ori	r18, 0x01	; 1
     b54:	16 c0       	rjmp	.+44     	; 0xb82 <vfprintf+0xb0>
     b56:	83 2d       	mov	r24, r3
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	38 2e       	mov	r3, r24
     b5c:	e3 2d       	mov	r30, r3
     b5e:	e4 60       	ori	r30, 0x04	; 4
     b60:	3e 2e       	mov	r3, r30
     b62:	2a c0       	rjmp	.+84     	; 0xbb8 <vfprintf+0xe6>
     b64:	f3 2d       	mov	r31, r3
     b66:	f8 60       	ori	r31, 0x08	; 8
     b68:	1d c0       	rjmp	.+58     	; 0xba4 <vfprintf+0xd2>
     b6a:	37 fc       	sbrc	r3, 7
     b6c:	2d c0       	rjmp	.+90     	; 0xbc8 <vfprintf+0xf6>
     b6e:	20 ed       	ldi	r18, 0xD0	; 208
     b70:	28 0f       	add	r18, r24
     b72:	2a 30       	cpi	r18, 0x0A	; 10
     b74:	40 f0       	brcs	.+16     	; 0xb86 <vfprintf+0xb4>
     b76:	8e 32       	cpi	r24, 0x2E	; 46
     b78:	b9 f4       	brne	.+46     	; 0xba8 <vfprintf+0xd6>
     b7a:	36 fc       	sbrc	r3, 6
     b7c:	81 c1       	rjmp	.+770    	; 0xe80 <vfprintf+0x3ae>
     b7e:	23 2d       	mov	r18, r3
     b80:	20 64       	ori	r18, 0x40	; 64
     b82:	32 2e       	mov	r3, r18
     b84:	19 c0       	rjmp	.+50     	; 0xbb8 <vfprintf+0xe6>
     b86:	36 fe       	sbrs	r3, 6
     b88:	06 c0       	rjmp	.+12     	; 0xb96 <vfprintf+0xc4>
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	98 9e       	mul	r9, r24
     b8e:	20 0d       	add	r18, r0
     b90:	11 24       	eor	r1, r1
     b92:	92 2e       	mov	r9, r18
     b94:	11 c0       	rjmp	.+34     	; 0xbb8 <vfprintf+0xe6>
     b96:	ea e0       	ldi	r30, 0x0A	; 10
     b98:	2e 9e       	mul	r2, r30
     b9a:	20 0d       	add	r18, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	22 2e       	mov	r2, r18
     ba0:	f3 2d       	mov	r31, r3
     ba2:	f0 62       	ori	r31, 0x20	; 32
     ba4:	3f 2e       	mov	r3, r31
     ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <vfprintf+0xe6>
     ba8:	8c 36       	cpi	r24, 0x6C	; 108
     baa:	21 f4       	brne	.+8      	; 0xbb4 <vfprintf+0xe2>
     bac:	83 2d       	mov	r24, r3
     bae:	80 68       	ori	r24, 0x80	; 128
     bb0:	38 2e       	mov	r3, r24
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <vfprintf+0xe6>
     bb4:	88 36       	cpi	r24, 0x68	; 104
     bb6:	41 f4       	brne	.+16     	; 0xbc8 <vfprintf+0xf6>
     bb8:	f7 01       	movw	r30, r14
     bba:	93 fd       	sbrc	r25, 3
     bbc:	85 91       	lpm	r24, Z+
     bbe:	93 ff       	sbrs	r25, 3
     bc0:	81 91       	ld	r24, Z+
     bc2:	7f 01       	movw	r14, r30
     bc4:	81 11       	cpse	r24, r1
     bc6:	b3 cf       	rjmp	.-154    	; 0xb2e <vfprintf+0x5c>
     bc8:	98 2f       	mov	r25, r24
     bca:	9f 7d       	andi	r25, 0xDF	; 223
     bcc:	95 54       	subi	r25, 0x45	; 69
     bce:	93 30       	cpi	r25, 0x03	; 3
     bd0:	28 f4       	brcc	.+10     	; 0xbdc <vfprintf+0x10a>
     bd2:	0c 5f       	subi	r16, 0xFC	; 252
     bd4:	1f 4f       	sbci	r17, 0xFF	; 255
     bd6:	9f e3       	ldi	r25, 0x3F	; 63
     bd8:	99 83       	std	Y+1, r25	; 0x01
     bda:	0d c0       	rjmp	.+26     	; 0xbf6 <vfprintf+0x124>
     bdc:	83 36       	cpi	r24, 0x63	; 99
     bde:	31 f0       	breq	.+12     	; 0xbec <vfprintf+0x11a>
     be0:	83 37       	cpi	r24, 0x73	; 115
     be2:	71 f0       	breq	.+28     	; 0xc00 <vfprintf+0x12e>
     be4:	83 35       	cpi	r24, 0x53	; 83
     be6:	09 f0       	breq	.+2      	; 0xbea <vfprintf+0x118>
     be8:	59 c0       	rjmp	.+178    	; 0xc9c <vfprintf+0x1ca>
     bea:	21 c0       	rjmp	.+66     	; 0xc2e <vfprintf+0x15c>
     bec:	f8 01       	movw	r30, r16
     bee:	80 81       	ld	r24, Z
     bf0:	89 83       	std	Y+1, r24	; 0x01
     bf2:	0e 5f       	subi	r16, 0xFE	; 254
     bf4:	1f 4f       	sbci	r17, 0xFF	; 255
     bf6:	88 24       	eor	r8, r8
     bf8:	83 94       	inc	r8
     bfa:	91 2c       	mov	r9, r1
     bfc:	53 01       	movw	r10, r6
     bfe:	13 c0       	rjmp	.+38     	; 0xc26 <vfprintf+0x154>
     c00:	28 01       	movw	r4, r16
     c02:	f2 e0       	ldi	r31, 0x02	; 2
     c04:	4f 0e       	add	r4, r31
     c06:	51 1c       	adc	r5, r1
     c08:	f8 01       	movw	r30, r16
     c0a:	a0 80       	ld	r10, Z
     c0c:	b1 80       	ldd	r11, Z+1	; 0x01
     c0e:	36 fe       	sbrs	r3, 6
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <vfprintf+0x146>
     c12:	69 2d       	mov	r22, r9
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <vfprintf+0x14a>
     c18:	6f ef       	ldi	r22, 0xFF	; 255
     c1a:	7f ef       	ldi	r23, 0xFF	; 255
     c1c:	c5 01       	movw	r24, r10
     c1e:	0e 94 55 07 	call	0xeaa	; 0xeaa <strnlen>
     c22:	4c 01       	movw	r8, r24
     c24:	82 01       	movw	r16, r4
     c26:	f3 2d       	mov	r31, r3
     c28:	ff 77       	andi	r31, 0x7F	; 127
     c2a:	3f 2e       	mov	r3, r31
     c2c:	16 c0       	rjmp	.+44     	; 0xc5a <vfprintf+0x188>
     c2e:	28 01       	movw	r4, r16
     c30:	22 e0       	ldi	r18, 0x02	; 2
     c32:	42 0e       	add	r4, r18
     c34:	51 1c       	adc	r5, r1
     c36:	f8 01       	movw	r30, r16
     c38:	a0 80       	ld	r10, Z
     c3a:	b1 80       	ldd	r11, Z+1	; 0x01
     c3c:	36 fe       	sbrs	r3, 6
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <vfprintf+0x174>
     c40:	69 2d       	mov	r22, r9
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <vfprintf+0x178>
     c46:	6f ef       	ldi	r22, 0xFF	; 255
     c48:	7f ef       	ldi	r23, 0xFF	; 255
     c4a:	c5 01       	movw	r24, r10
     c4c:	0e 94 4a 07 	call	0xe94	; 0xe94 <strnlen_P>
     c50:	4c 01       	movw	r8, r24
     c52:	f3 2d       	mov	r31, r3
     c54:	f0 68       	ori	r31, 0x80	; 128
     c56:	3f 2e       	mov	r3, r31
     c58:	82 01       	movw	r16, r4
     c5a:	33 fc       	sbrc	r3, 3
     c5c:	1b c0       	rjmp	.+54     	; 0xc94 <vfprintf+0x1c2>
     c5e:	82 2d       	mov	r24, r2
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	88 16       	cp	r8, r24
     c64:	99 06       	cpc	r9, r25
     c66:	b0 f4       	brcc	.+44     	; 0xc94 <vfprintf+0x1c2>
     c68:	b6 01       	movw	r22, r12
     c6a:	80 e2       	ldi	r24, 0x20	; 32
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     c72:	2a 94       	dec	r2
     c74:	f4 cf       	rjmp	.-24     	; 0xc5e <vfprintf+0x18c>
     c76:	f5 01       	movw	r30, r10
     c78:	37 fc       	sbrc	r3, 7
     c7a:	85 91       	lpm	r24, Z+
     c7c:	37 fe       	sbrs	r3, 7
     c7e:	81 91       	ld	r24, Z+
     c80:	5f 01       	movw	r10, r30
     c82:	b6 01       	movw	r22, r12
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     c8a:	21 10       	cpse	r2, r1
     c8c:	2a 94       	dec	r2
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	82 1a       	sub	r8, r18
     c92:	91 08       	sbc	r9, r1
     c94:	81 14       	cp	r8, r1
     c96:	91 04       	cpc	r9, r1
     c98:	71 f7       	brne	.-36     	; 0xc76 <vfprintf+0x1a4>
     c9a:	e8 c0       	rjmp	.+464    	; 0xe6c <vfprintf+0x39a>
     c9c:	84 36       	cpi	r24, 0x64	; 100
     c9e:	11 f0       	breq	.+4      	; 0xca4 <vfprintf+0x1d2>
     ca0:	89 36       	cpi	r24, 0x69	; 105
     ca2:	41 f5       	brne	.+80     	; 0xcf4 <vfprintf+0x222>
     ca4:	f8 01       	movw	r30, r16
     ca6:	37 fe       	sbrs	r3, 7
     ca8:	07 c0       	rjmp	.+14     	; 0xcb8 <vfprintf+0x1e6>
     caa:	60 81       	ld	r22, Z
     cac:	71 81       	ldd	r23, Z+1	; 0x01
     cae:	82 81       	ldd	r24, Z+2	; 0x02
     cb0:	93 81       	ldd	r25, Z+3	; 0x03
     cb2:	0c 5f       	subi	r16, 0xFC	; 252
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
     cb6:	08 c0       	rjmp	.+16     	; 0xcc8 <vfprintf+0x1f6>
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	07 2e       	mov	r0, r23
     cbe:	00 0c       	add	r0, r0
     cc0:	88 0b       	sbc	r24, r24
     cc2:	99 0b       	sbc	r25, r25
     cc4:	0e 5f       	subi	r16, 0xFE	; 254
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	f3 2d       	mov	r31, r3
     cca:	ff 76       	andi	r31, 0x6F	; 111
     ccc:	3f 2e       	mov	r3, r31
     cce:	97 ff       	sbrs	r25, 7
     cd0:	09 c0       	rjmp	.+18     	; 0xce4 <vfprintf+0x212>
     cd2:	90 95       	com	r25
     cd4:	80 95       	com	r24
     cd6:	70 95       	com	r23
     cd8:	61 95       	neg	r22
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	8f 4f       	sbci	r24, 0xFF	; 255
     cde:	9f 4f       	sbci	r25, 0xFF	; 255
     ce0:	f0 68       	ori	r31, 0x80	; 128
     ce2:	3f 2e       	mov	r3, r31
     ce4:	2a e0       	ldi	r18, 0x0A	; 10
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	a3 01       	movw	r20, r6
     cea:	0e 94 ac 07 	call	0xf58	; 0xf58 <__ultoa_invert>
     cee:	88 2e       	mov	r8, r24
     cf0:	86 18       	sub	r8, r6
     cf2:	45 c0       	rjmp	.+138    	; 0xd7e <vfprintf+0x2ac>
     cf4:	85 37       	cpi	r24, 0x75	; 117
     cf6:	31 f4       	brne	.+12     	; 0xd04 <vfprintf+0x232>
     cf8:	23 2d       	mov	r18, r3
     cfa:	2f 7e       	andi	r18, 0xEF	; 239
     cfc:	b2 2e       	mov	r11, r18
     cfe:	2a e0       	ldi	r18, 0x0A	; 10
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	25 c0       	rjmp	.+74     	; 0xd4e <vfprintf+0x27c>
     d04:	93 2d       	mov	r25, r3
     d06:	99 7f       	andi	r25, 0xF9	; 249
     d08:	b9 2e       	mov	r11, r25
     d0a:	8f 36       	cpi	r24, 0x6F	; 111
     d0c:	c1 f0       	breq	.+48     	; 0xd3e <vfprintf+0x26c>
     d0e:	18 f4       	brcc	.+6      	; 0xd16 <vfprintf+0x244>
     d10:	88 35       	cpi	r24, 0x58	; 88
     d12:	79 f0       	breq	.+30     	; 0xd32 <vfprintf+0x260>
     d14:	b5 c0       	rjmp	.+362    	; 0xe80 <vfprintf+0x3ae>
     d16:	80 37       	cpi	r24, 0x70	; 112
     d18:	19 f0       	breq	.+6      	; 0xd20 <vfprintf+0x24e>
     d1a:	88 37       	cpi	r24, 0x78	; 120
     d1c:	21 f0       	breq	.+8      	; 0xd26 <vfprintf+0x254>
     d1e:	b0 c0       	rjmp	.+352    	; 0xe80 <vfprintf+0x3ae>
     d20:	e9 2f       	mov	r30, r25
     d22:	e0 61       	ori	r30, 0x10	; 16
     d24:	be 2e       	mov	r11, r30
     d26:	b4 fe       	sbrs	r11, 4
     d28:	0d c0       	rjmp	.+26     	; 0xd44 <vfprintf+0x272>
     d2a:	fb 2d       	mov	r31, r11
     d2c:	f4 60       	ori	r31, 0x04	; 4
     d2e:	bf 2e       	mov	r11, r31
     d30:	09 c0       	rjmp	.+18     	; 0xd44 <vfprintf+0x272>
     d32:	34 fe       	sbrs	r3, 4
     d34:	0a c0       	rjmp	.+20     	; 0xd4a <vfprintf+0x278>
     d36:	29 2f       	mov	r18, r25
     d38:	26 60       	ori	r18, 0x06	; 6
     d3a:	b2 2e       	mov	r11, r18
     d3c:	06 c0       	rjmp	.+12     	; 0xd4a <vfprintf+0x278>
     d3e:	28 e0       	ldi	r18, 0x08	; 8
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <vfprintf+0x27c>
     d44:	20 e1       	ldi	r18, 0x10	; 16
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x27c>
     d4a:	20 e1       	ldi	r18, 0x10	; 16
     d4c:	32 e0       	ldi	r19, 0x02	; 2
     d4e:	f8 01       	movw	r30, r16
     d50:	b7 fe       	sbrs	r11, 7
     d52:	07 c0       	rjmp	.+14     	; 0xd62 <vfprintf+0x290>
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	0c 5f       	subi	r16, 0xFC	; 252
     d5e:	1f 4f       	sbci	r17, 0xFF	; 255
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <vfprintf+0x29c>
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 5f       	subi	r16, 0xFE	; 254
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	a3 01       	movw	r20, r6
     d70:	0e 94 ac 07 	call	0xf58	; 0xf58 <__ultoa_invert>
     d74:	88 2e       	mov	r8, r24
     d76:	86 18       	sub	r8, r6
     d78:	fb 2d       	mov	r31, r11
     d7a:	ff 77       	andi	r31, 0x7F	; 127
     d7c:	3f 2e       	mov	r3, r31
     d7e:	36 fe       	sbrs	r3, 6
     d80:	0d c0       	rjmp	.+26     	; 0xd9c <vfprintf+0x2ca>
     d82:	23 2d       	mov	r18, r3
     d84:	2e 7f       	andi	r18, 0xFE	; 254
     d86:	a2 2e       	mov	r10, r18
     d88:	89 14       	cp	r8, r9
     d8a:	58 f4       	brcc	.+22     	; 0xda2 <vfprintf+0x2d0>
     d8c:	34 fe       	sbrs	r3, 4
     d8e:	0b c0       	rjmp	.+22     	; 0xda6 <vfprintf+0x2d4>
     d90:	32 fc       	sbrc	r3, 2
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <vfprintf+0x2d4>
     d94:	83 2d       	mov	r24, r3
     d96:	8e 7e       	andi	r24, 0xEE	; 238
     d98:	a8 2e       	mov	r10, r24
     d9a:	05 c0       	rjmp	.+10     	; 0xda6 <vfprintf+0x2d4>
     d9c:	b8 2c       	mov	r11, r8
     d9e:	a3 2c       	mov	r10, r3
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <vfprintf+0x2d6>
     da2:	b8 2c       	mov	r11, r8
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <vfprintf+0x2d6>
     da6:	b9 2c       	mov	r11, r9
     da8:	a4 fe       	sbrs	r10, 4
     daa:	0f c0       	rjmp	.+30     	; 0xdca <vfprintf+0x2f8>
     dac:	fe 01       	movw	r30, r28
     dae:	e8 0d       	add	r30, r8
     db0:	f1 1d       	adc	r31, r1
     db2:	80 81       	ld	r24, Z
     db4:	80 33       	cpi	r24, 0x30	; 48
     db6:	21 f4       	brne	.+8      	; 0xdc0 <vfprintf+0x2ee>
     db8:	9a 2d       	mov	r25, r10
     dba:	99 7e       	andi	r25, 0xE9	; 233
     dbc:	a9 2e       	mov	r10, r25
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <vfprintf+0x300>
     dc0:	a2 fe       	sbrs	r10, 2
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <vfprintf+0x2fe>
     dc4:	b3 94       	inc	r11
     dc6:	b3 94       	inc	r11
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <vfprintf+0x300>
     dca:	8a 2d       	mov	r24, r10
     dcc:	86 78       	andi	r24, 0x86	; 134
     dce:	09 f0       	breq	.+2      	; 0xdd2 <vfprintf+0x300>
     dd0:	b3 94       	inc	r11
     dd2:	a3 fc       	sbrc	r10, 3
     dd4:	11 c0       	rjmp	.+34     	; 0xdf8 <vfprintf+0x326>
     dd6:	a0 fe       	sbrs	r10, 0
     dd8:	06 c0       	rjmp	.+12     	; 0xde6 <vfprintf+0x314>
     dda:	b2 14       	cp	r11, r2
     ddc:	88 f4       	brcc	.+34     	; 0xe00 <vfprintf+0x32e>
     dde:	28 0c       	add	r2, r8
     de0:	92 2c       	mov	r9, r2
     de2:	9b 18       	sub	r9, r11
     de4:	0e c0       	rjmp	.+28     	; 0xe02 <vfprintf+0x330>
     de6:	b2 14       	cp	r11, r2
     de8:	60 f4       	brcc	.+24     	; 0xe02 <vfprintf+0x330>
     dea:	b6 01       	movw	r22, r12
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     df4:	b3 94       	inc	r11
     df6:	f7 cf       	rjmp	.-18     	; 0xde6 <vfprintf+0x314>
     df8:	b2 14       	cp	r11, r2
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <vfprintf+0x330>
     dfc:	2b 18       	sub	r2, r11
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x332>
     e00:	98 2c       	mov	r9, r8
     e02:	21 2c       	mov	r2, r1
     e04:	a4 fe       	sbrs	r10, 4
     e06:	10 c0       	rjmp	.+32     	; 0xe28 <vfprintf+0x356>
     e08:	b6 01       	movw	r22, r12
     e0a:	80 e3       	ldi	r24, 0x30	; 48
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     e12:	a2 fe       	sbrs	r10, 2
     e14:	17 c0       	rjmp	.+46     	; 0xe44 <vfprintf+0x372>
     e16:	a1 fc       	sbrc	r10, 1
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <vfprintf+0x34e>
     e1a:	88 e7       	ldi	r24, 0x78	; 120
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <vfprintf+0x352>
     e20:	88 e5       	ldi	r24, 0x58	; 88
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	b6 01       	movw	r22, r12
     e26:	0c c0       	rjmp	.+24     	; 0xe40 <vfprintf+0x36e>
     e28:	8a 2d       	mov	r24, r10
     e2a:	86 78       	andi	r24, 0x86	; 134
     e2c:	59 f0       	breq	.+22     	; 0xe44 <vfprintf+0x372>
     e2e:	a1 fe       	sbrs	r10, 1
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <vfprintf+0x364>
     e32:	8b e2       	ldi	r24, 0x2B	; 43
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <vfprintf+0x366>
     e36:	80 e2       	ldi	r24, 0x20	; 32
     e38:	a7 fc       	sbrc	r10, 7
     e3a:	8d e2       	ldi	r24, 0x2D	; 45
     e3c:	b6 01       	movw	r22, r12
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     e44:	89 14       	cp	r8, r9
     e46:	38 f4       	brcc	.+14     	; 0xe56 <vfprintf+0x384>
     e48:	b6 01       	movw	r22, r12
     e4a:	80 e3       	ldi	r24, 0x30	; 48
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     e52:	9a 94       	dec	r9
     e54:	f7 cf       	rjmp	.-18     	; 0xe44 <vfprintf+0x372>
     e56:	8a 94       	dec	r8
     e58:	f3 01       	movw	r30, r6
     e5a:	e8 0d       	add	r30, r8
     e5c:	f1 1d       	adc	r31, r1
     e5e:	80 81       	ld	r24, Z
     e60:	b6 01       	movw	r22, r12
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     e68:	81 10       	cpse	r8, r1
     e6a:	f5 cf       	rjmp	.-22     	; 0xe56 <vfprintf+0x384>
     e6c:	22 20       	and	r2, r2
     e6e:	09 f4       	brne	.+2      	; 0xe72 <vfprintf+0x3a0>
     e70:	42 ce       	rjmp	.-892    	; 0xaf6 <vfprintf+0x24>
     e72:	b6 01       	movw	r22, r12
     e74:	80 e2       	ldi	r24, 0x20	; 32
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
     e7c:	2a 94       	dec	r2
     e7e:	f6 cf       	rjmp	.-20     	; 0xe6c <vfprintf+0x39a>
     e80:	f6 01       	movw	r30, r12
     e82:	86 81       	ldd	r24, Z+6	; 0x06
     e84:	97 81       	ldd	r25, Z+7	; 0x07
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <vfprintf+0x3ba>
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	9f ef       	ldi	r25, 0xFF	; 255
     e8c:	2b 96       	adiw	r28, 0x0b	; 11
     e8e:	e2 e1       	ldi	r30, 0x12	; 18
     e90:	0c 94 26 08 	jmp	0x104c	; 0x104c <__epilogue_restores__>

00000e94 <strnlen_P>:
     e94:	fc 01       	movw	r30, r24
     e96:	05 90       	lpm	r0, Z+
     e98:	61 50       	subi	r22, 0x01	; 1
     e9a:	70 40       	sbci	r23, 0x00	; 0
     e9c:	01 10       	cpse	r0, r1
     e9e:	d8 f7       	brcc	.-10     	; 0xe96 <strnlen_P+0x2>
     ea0:	80 95       	com	r24
     ea2:	90 95       	com	r25
     ea4:	8e 0f       	add	r24, r30
     ea6:	9f 1f       	adc	r25, r31
     ea8:	08 95       	ret

00000eaa <strnlen>:
     eaa:	fc 01       	movw	r30, r24
     eac:	61 50       	subi	r22, 0x01	; 1
     eae:	70 40       	sbci	r23, 0x00	; 0
     eb0:	01 90       	ld	r0, Z+
     eb2:	01 10       	cpse	r0, r1
     eb4:	d8 f7       	brcc	.-10     	; 0xeac <strnlen+0x2>
     eb6:	80 95       	com	r24
     eb8:	90 95       	com	r25
     eba:	8e 0f       	add	r24, r30
     ebc:	9f 1f       	adc	r25, r31
     ebe:	08 95       	ret

00000ec0 <strrev>:
     ec0:	dc 01       	movw	r26, r24
     ec2:	fc 01       	movw	r30, r24
     ec4:	67 2f       	mov	r22, r23
     ec6:	71 91       	ld	r23, Z+
     ec8:	77 23       	and	r23, r23
     eca:	e1 f7       	brne	.-8      	; 0xec4 <strrev+0x4>
     ecc:	32 97       	sbiw	r30, 0x02	; 2
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <strrev+0x18>
     ed0:	7c 91       	ld	r23, X
     ed2:	6d 93       	st	X+, r22
     ed4:	70 83       	st	Z, r23
     ed6:	62 91       	ld	r22, -Z
     ed8:	ae 17       	cp	r26, r30
     eda:	bf 07       	cpc	r27, r31
     edc:	c8 f3       	brcs	.-14     	; 0xed0 <strrev+0x10>
     ede:	08 95       	ret

00000ee0 <fputc>:
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	fb 01       	movw	r30, r22
     eea:	23 81       	ldd	r18, Z+3	; 0x03
     eec:	21 fd       	sbrc	r18, 1
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <fputc+0x16>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	9f ef       	ldi	r25, 0xFF	; 255
     ef4:	2c c0       	rjmp	.+88     	; 0xf4e <fputc+0x6e>
     ef6:	22 ff       	sbrs	r18, 2
     ef8:	16 c0       	rjmp	.+44     	; 0xf26 <fputc+0x46>
     efa:	46 81       	ldd	r20, Z+6	; 0x06
     efc:	57 81       	ldd	r21, Z+7	; 0x07
     efe:	24 81       	ldd	r18, Z+4	; 0x04
     f00:	35 81       	ldd	r19, Z+5	; 0x05
     f02:	42 17       	cp	r20, r18
     f04:	53 07       	cpc	r21, r19
     f06:	44 f4       	brge	.+16     	; 0xf18 <fputc+0x38>
     f08:	a0 81       	ld	r26, Z
     f0a:	b1 81       	ldd	r27, Z+1	; 0x01
     f0c:	9d 01       	movw	r18, r26
     f0e:	2f 5f       	subi	r18, 0xFF	; 255
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	31 83       	std	Z+1, r19	; 0x01
     f14:	20 83       	st	Z, r18
     f16:	8c 93       	st	X, r24
     f18:	26 81       	ldd	r18, Z+6	; 0x06
     f1a:	37 81       	ldd	r19, Z+7	; 0x07
     f1c:	2f 5f       	subi	r18, 0xFF	; 255
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
     f20:	37 83       	std	Z+7, r19	; 0x07
     f22:	26 83       	std	Z+6, r18	; 0x06
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <fputc+0x6e>
     f26:	8b 01       	movw	r16, r22
     f28:	ec 01       	movw	r28, r24
     f2a:	fb 01       	movw	r30, r22
     f2c:	00 84       	ldd	r0, Z+8	; 0x08
     f2e:	f1 85       	ldd	r31, Z+9	; 0x09
     f30:	e0 2d       	mov	r30, r0
     f32:	09 95       	icall
     f34:	89 2b       	or	r24, r25
     f36:	e1 f6       	brne	.-72     	; 0xef0 <fputc+0x10>
     f38:	d8 01       	movw	r26, r16
     f3a:	16 96       	adiw	r26, 0x06	; 6
     f3c:	8d 91       	ld	r24, X+
     f3e:	9c 91       	ld	r25, X
     f40:	17 97       	sbiw	r26, 0x07	; 7
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	17 96       	adiw	r26, 0x07	; 7
     f46:	9c 93       	st	X, r25
     f48:	8e 93       	st	-X, r24
     f4a:	16 97       	sbiw	r26, 0x06	; 6
     f4c:	ce 01       	movw	r24, r28
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	0f 91       	pop	r16
     f56:	08 95       	ret

00000f58 <__ultoa_invert>:
     f58:	fa 01       	movw	r30, r20
     f5a:	aa 27       	eor	r26, r26
     f5c:	28 30       	cpi	r18, 0x08	; 8
     f5e:	51 f1       	breq	.+84     	; 0xfb4 <__ultoa_invert+0x5c>
     f60:	20 31       	cpi	r18, 0x10	; 16
     f62:	81 f1       	breq	.+96     	; 0xfc4 <__ultoa_invert+0x6c>
     f64:	e8 94       	clt
     f66:	6f 93       	push	r22
     f68:	6e 7f       	andi	r22, 0xFE	; 254
     f6a:	6e 5f       	subi	r22, 0xFE	; 254
     f6c:	7f 4f       	sbci	r23, 0xFF	; 255
     f6e:	8f 4f       	sbci	r24, 0xFF	; 255
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	af 4f       	sbci	r26, 0xFF	; 255
     f74:	b1 e0       	ldi	r27, 0x01	; 1
     f76:	3e d0       	rcall	.+124    	; 0xff4 <__ultoa_invert+0x9c>
     f78:	b4 e0       	ldi	r27, 0x04	; 4
     f7a:	3c d0       	rcall	.+120    	; 0xff4 <__ultoa_invert+0x9c>
     f7c:	67 0f       	add	r22, r23
     f7e:	78 1f       	adc	r23, r24
     f80:	89 1f       	adc	r24, r25
     f82:	9a 1f       	adc	r25, r26
     f84:	a1 1d       	adc	r26, r1
     f86:	68 0f       	add	r22, r24
     f88:	79 1f       	adc	r23, r25
     f8a:	8a 1f       	adc	r24, r26
     f8c:	91 1d       	adc	r25, r1
     f8e:	a1 1d       	adc	r26, r1
     f90:	6a 0f       	add	r22, r26
     f92:	71 1d       	adc	r23, r1
     f94:	81 1d       	adc	r24, r1
     f96:	91 1d       	adc	r25, r1
     f98:	a1 1d       	adc	r26, r1
     f9a:	20 d0       	rcall	.+64     	; 0xfdc <__ultoa_invert+0x84>
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <__ultoa_invert+0x48>
     f9e:	68 94       	set
     fa0:	3f 91       	pop	r19
     fa2:	2a e0       	ldi	r18, 0x0A	; 10
     fa4:	26 9f       	mul	r18, r22
     fa6:	11 24       	eor	r1, r1
     fa8:	30 19       	sub	r19, r0
     faa:	30 5d       	subi	r19, 0xD0	; 208
     fac:	31 93       	st	Z+, r19
     fae:	de f6       	brtc	.-74     	; 0xf66 <__ultoa_invert+0xe>
     fb0:	cf 01       	movw	r24, r30
     fb2:	08 95       	ret
     fb4:	46 2f       	mov	r20, r22
     fb6:	47 70       	andi	r20, 0x07	; 7
     fb8:	40 5d       	subi	r20, 0xD0	; 208
     fba:	41 93       	st	Z+, r20
     fbc:	b3 e0       	ldi	r27, 0x03	; 3
     fbe:	0f d0       	rcall	.+30     	; 0xfde <__ultoa_invert+0x86>
     fc0:	c9 f7       	brne	.-14     	; 0xfb4 <__ultoa_invert+0x5c>
     fc2:	f6 cf       	rjmp	.-20     	; 0xfb0 <__ultoa_invert+0x58>
     fc4:	46 2f       	mov	r20, r22
     fc6:	4f 70       	andi	r20, 0x0F	; 15
     fc8:	40 5d       	subi	r20, 0xD0	; 208
     fca:	4a 33       	cpi	r20, 0x3A	; 58
     fcc:	18 f0       	brcs	.+6      	; 0xfd4 <__ultoa_invert+0x7c>
     fce:	49 5d       	subi	r20, 0xD9	; 217
     fd0:	31 fd       	sbrc	r19, 1
     fd2:	40 52       	subi	r20, 0x20	; 32
     fd4:	41 93       	st	Z+, r20
     fd6:	02 d0       	rcall	.+4      	; 0xfdc <__ultoa_invert+0x84>
     fd8:	a9 f7       	brne	.-22     	; 0xfc4 <__ultoa_invert+0x6c>
     fda:	ea cf       	rjmp	.-44     	; 0xfb0 <__ultoa_invert+0x58>
     fdc:	b4 e0       	ldi	r27, 0x04	; 4
     fde:	a6 95       	lsr	r26
     fe0:	97 95       	ror	r25
     fe2:	87 95       	ror	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	ba 95       	dec	r27
     fea:	c9 f7       	brne	.-14     	; 0xfde <__ultoa_invert+0x86>
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	61 05       	cpc	r22, r1
     ff0:	71 05       	cpc	r23, r1
     ff2:	08 95       	ret
     ff4:	9b 01       	movw	r18, r22
     ff6:	ac 01       	movw	r20, r24
     ff8:	0a 2e       	mov	r0, r26
     ffa:	06 94       	lsr	r0
     ffc:	57 95       	ror	r21
     ffe:	47 95       	ror	r20
    1000:	37 95       	ror	r19
    1002:	27 95       	ror	r18
    1004:	ba 95       	dec	r27
    1006:	c9 f7       	brne	.-14     	; 0xffa <__ultoa_invert+0xa2>
    1008:	62 0f       	add	r22, r18
    100a:	73 1f       	adc	r23, r19
    100c:	84 1f       	adc	r24, r20
    100e:	95 1f       	adc	r25, r21
    1010:	a0 1d       	adc	r26, r0
    1012:	08 95       	ret

00001014 <__prologue_saves__>:
    1014:	2f 92       	push	r2
    1016:	3f 92       	push	r3
    1018:	4f 92       	push	r4
    101a:	5f 92       	push	r5
    101c:	6f 92       	push	r6
    101e:	7f 92       	push	r7
    1020:	8f 92       	push	r8
    1022:	9f 92       	push	r9
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	ca 1b       	sub	r28, r26
    103e:	db 0b       	sbc	r29, r27
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	09 94       	ijmp

0000104c <__epilogue_restores__>:
    104c:	2a 88       	ldd	r2, Y+18	; 0x12
    104e:	39 88       	ldd	r3, Y+17	; 0x11
    1050:	48 88       	ldd	r4, Y+16	; 0x10
    1052:	5f 84       	ldd	r5, Y+15	; 0x0f
    1054:	6e 84       	ldd	r6, Y+14	; 0x0e
    1056:	7d 84       	ldd	r7, Y+13	; 0x0d
    1058:	8c 84       	ldd	r8, Y+12	; 0x0c
    105a:	9b 84       	ldd	r9, Y+11	; 0x0b
    105c:	aa 84       	ldd	r10, Y+10	; 0x0a
    105e:	b9 84       	ldd	r11, Y+9	; 0x09
    1060:	c8 84       	ldd	r12, Y+8	; 0x08
    1062:	df 80       	ldd	r13, Y+7	; 0x07
    1064:	ee 80       	ldd	r14, Y+6	; 0x06
    1066:	fd 80       	ldd	r15, Y+5	; 0x05
    1068:	0c 81       	ldd	r16, Y+4	; 0x04
    106a:	1b 81       	ldd	r17, Y+3	; 0x03
    106c:	aa 81       	ldd	r26, Y+2	; 0x02
    106e:	b9 81       	ldd	r27, Y+1	; 0x01
    1070:	ce 0f       	add	r28, r30
    1072:	d1 1d       	adc	r29, r1
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	ed 01       	movw	r28, r26
    1080:	08 95       	ret

00001082 <_exit>:
    1082:	f8 94       	cli

00001084 <__stop_program>:
    1084:	ff cf       	rjmp	.-2      	; 0x1084 <__stop_program>
